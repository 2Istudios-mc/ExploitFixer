package twolovers.exploitfixer.bukkit;

import java.util.logging.Logger;

import org.bukkit.Server;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitScheduler;

import twolovers.exploitfixer.bukkit.commands.ExploitFixerCommand;
import twolovers.exploitfixer.bukkit.listeners.initializers.ListenerInitializer;
import twolovers.exploitfixer.bukkit.managers.ExploitPlayerManager;
import twolovers.exploitfixer.bukkit.managers.ModuleManager;
import twolovers.exploitfixer.bukkit.utils.ConfigurationUtil;
import twolovers.exploitfixer.bukkit.utils.VersionUtil;

public class ExploitFixer extends JavaPlugin {
	private static ExploitFixer exploitFixer;
	private ModuleManager moduleManager;
	private ListenerInitializer listenerInitializer;

	@Override
	public void onEnable() {
		final Server server = this.getServer();
		final BukkitScheduler scheduler = server.getScheduler();
		final ConfigurationUtil configurationUtil = new ConfigurationUtil(this);

		configurationUtil.createConfiguration("%datafolder%/config.yml");
		configurationUtil.createConfiguration("%datafolder%/messages.yml");

		final YamlConfiguration configYml = configurationUtil.getConfiguration("%datafolder%/config.yml");
		final YamlConfiguration messagesYml = configurationUtil.getConfiguration("%datafolder%/messages.yml");

		exploitFixer = this;
		this.moduleManager = new ModuleManager(this, configYml, messagesYml);

		if (server.getPluginManager().isPluginEnabled("HamsterAPI")) {
			this.listenerInitializer = new ListenerInitializer(this, moduleManager);
		}

		server.getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");

		VersionUtil.init();
		reload();

		scheduler.runTaskTimerAsynchronously(this, () -> {
			final ExploitPlayerManager exploitPlayerManager = moduleManager.getExploitPlayerManager();

			exploitPlayerManager.clear();
		}, 9000L, 9000L);
	}

	@Override
	public void onDisable() {
		final Server server = this.getServer();
		final BukkitScheduler scheduler = server.getScheduler();

		scheduler.cancelTasks(this);

		if (server.getPluginManager().isPluginEnabled("HamsterAPI")) {
			this.listenerInitializer.stop();
		} else {
			final Logger logger = this.getLogger();

			for (int i = 0; i < 10; i++) {
				logger.severe("ExploitFixer requires HamsterAPI to protect agaisnt exploits!");
			}
		}
	}

	public void reload() {
		if (isEnabled()) {
			final Server server = getServer();
			final Logger logger = server.getLogger();
			final ConfigurationUtil configurationUtil = new ConfigurationUtil(this);

			server.getMessenger().unregisterIncomingPluginChannel(this);
			configurationUtil.createConfiguration("%datafolder%/config.yml");
			configurationUtil.createConfiguration("%datafolder%/messages.yml");

			final YamlConfiguration configYml = configurationUtil.getConfiguration("%datafolder%/config.yml");
			final YamlConfiguration messagesYml = configurationUtil.getConfiguration("%datafolder%/messages.yml");
			final YamlConfiguration spigotYml = configurationUtil.getConfiguration("%datafolder%/../spigot.yml");

			moduleManager.reload(configYml, messagesYml, spigotYml);

			if (server.getPluginManager().isPluginEnabled("HamsterAPI")) {
				this.listenerInitializer.start();
			} else {
				for (int i = 0; i < 10; i++) {
					logger.severe("ExploitFixer requires HamsterAPI to protect agaisnt exploits!");
				}
			}

			getCommand("exploitfixer").setExecutor(new ExploitFixerCommand(moduleManager));
		}
	}

	public static ExploitFixer getInstance() {
		return exploitFixer;
	}
}