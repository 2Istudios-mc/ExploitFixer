package twolovers.exploitfixer.bukkit;

import org.bukkit.Server;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;
import twolovers.exploitfixer.bukkit.adapters.initializers.AdapterInitializer;
import twolovers.exploitfixer.bukkit.commands.ExploitFixerCommand;
import twolovers.exploitfixer.bukkit.listeners.initializers.ListenerInitializer;
import twolovers.exploitfixer.bukkit.managers.BukkitModuleManager;
import twolovers.exploitfixer.bukkit.utils.ConfigurationUtil;
import twolovers.exploitfixer.bukkit.utils.VersionUtil;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;

import java.util.logging.Level;

public class ExploitFixer extends JavaPlugin {
	private static ExploitFixer exploitFixer;
	private ModuleManager moduleManager;

	public void onEnable() {
		final Server server = this.getServer();
		final ConfigurationUtil configurationUtil = new ConfigurationUtil(this);

		configurationUtil.createConfiguration("%datafolder%/config.yml");
		configurationUtil.createConfiguration("%datafolder%/messages.yml");

		final YamlConfiguration configYml = configurationUtil.getConfiguration("%datafolder%/config.yml");
		final YamlConfiguration messagesYml = configurationUtil.getConfiguration("%datafolder%/messages.yml");

		exploitFixer = this;
		this.moduleManager = new BukkitModuleManager(this, configYml, messagesYml);

		VersionUtil.init();

		reload();

		server.getScheduler().scheduleSyncRepeatingTask(this, () -> {
			final ExploitPlayerManager exploitPlayerManager = moduleManager.getExploitPlayerManager();

			exploitPlayerManager.clear();
		}, 9000L, 9000L);
	}

	public void reload() {
		final PluginManager pluginManager = getServer().getPluginManager();
		final ConfigurationUtil configurationUtil = new ConfigurationUtil(this);

		configurationUtil.createConfiguration("%datafolder%/config.yml");
		configurationUtil.createConfiguration("%datafolder%/messages.yml");

		final YamlConfiguration configYml = configurationUtil.getConfiguration("%datafolder%/config.yml");
		final YamlConfiguration messagesYml = configurationUtil.getConfiguration("%datafolder%/messages.yml");
		final YamlConfiguration spigotYml = configurationUtil.getConfiguration("%datafolder%/../spigot.yml");

		moduleManager.reload(configYml, messagesYml, spigotYml);

		if (pluginManager.isPluginEnabled("ProtocolLib"))
			new AdapterInitializer(this, moduleManager);
		else
			getLogger().log(Level.INFO, "[ExploitFixer] Please install ProtocolLib or your server will remain unprotected from exploits!");

		new ListenerInitializer(this, moduleManager);

		getCommand("exploitfixer").setExecutor(new ExploitFixerCommand(moduleManager));
	}

	public static ExploitFixer getInstance() {
		return exploitFixer;
	}
}