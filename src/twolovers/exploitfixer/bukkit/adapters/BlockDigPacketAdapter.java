package twolovers.exploitfixer.bukkit.adapters;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.reflect.StructureModifier;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.PacketsModule;

import java.util.UUID;

public class BlockDigPacketAdapter extends PacketAdapter {
	private final PacketType packetType;
	private final ModuleManager moduleManager;

	public BlockDigPacketAdapter(final Plugin plugin, final ListenerPriority listenerPriority, final PacketType packetType, final ModuleManager moduleManager) {
		super(plugin, listenerPriority, packetType);
		this.packetType = packetType;
		this.moduleManager = moduleManager;
	}

	@Override
	public void onPacketReceiving(final PacketEvent event) {
		if (!event.isCancelled()) {
			final PacketsModule packetsModule = moduleManager.getPacketsModule();
			final double blockDig = packetsModule.getBlockDig();

			if (blockDig > 0) {
				final Player player = event.getPlayer();

				if (player != null && player.isOnline()) {
					try {
						final UUID uuid = player.getUniqueId();
						final StructureModifier<ItemStack> itemModifier = event.getPacket().getItemModifier();

						if (itemModifier != null && itemModifier.size() > 0) {
							final ItemStack itemUse = itemModifier.read(0);

							if (itemUse != null) {
								final PlayerInventory playerInventory = player.getInventory();
								ItemStack itemOnHand = playerInventory.getItem(playerInventory.getHeldItemSlot());

								if (itemOnHand == null)
									itemOnHand = new ItemStack(Material.AIR);

								if ((!itemUse.isSimilar(itemOnHand) && itemUse.hasItemMeta() && itemUse.getItemMeta().toString().length() > 512)) {
									final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager().get(uuid, player);

									if (exploitPlayer != null)
										exploitPlayer.addVls(plugin, event, player, packetsModule, blockDig);
									else
										event.setCancelled(true);
								}
							}
						}
					} catch (final UnsupportedOperationException ignored) {
						event.setCancelled(true);
					}
				} else if (packetsModule.isOffline())
					event.setCancelled(true);
			}

			if (!event.isCancelled())
				packetsModule.check(event);
		}
	}
}