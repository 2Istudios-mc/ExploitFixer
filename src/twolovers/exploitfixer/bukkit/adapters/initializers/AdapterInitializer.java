package twolovers.exploitfixer.bukkit.adapters.initializers;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.bukkit.adapters.BlockDigPacketAdapter;
import twolovers.exploitfixer.bukkit.adapters.BlockPlacePacketAdapter;
import twolovers.exploitfixer.bukkit.adapters.SetCreativeSlotPacketAdapter;
import twolovers.exploitfixer.bukkit.adapters.WindowClickPacketAdapter;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.CustomPayloadModule;
import twolovers.exploitfixer.interfaces.modules.PacketsModule;

public class AdapterInitializer {
	public AdapterInitializer(final Plugin plugin, final ModuleManager moduleManager) {
		final ProtocolManager protocolManager = ProtocolLibrary.getProtocolManager();
		final PacketsModule packetsModule = moduleManager.getPacketsModule();
		final CustomPayloadModule customPayloadModule = moduleManager.getCustomPayloadModule();

		protocolManager.removePacketListeners(plugin);

		for (final PacketType packetType : PacketType.Play.Client.getInstance()) {
			if (packetType.isSupported() && packetType != PacketType.Play.Client.BLOCK_DIG
					&& packetType != PacketType.Play.Client.BLOCK_PLACE
					&& packetType != PacketType.Play.Client.SET_CREATIVE_SLOT
					&& packetType != PacketType.Play.Client.WINDOW_CLICK) {
				if (packetType == PacketType.Play.Client.CUSTOM_PAYLOAD && customPayloadModule.isEnabled()) {
					protocolManager.addPacketListener(new PacketAdapter(plugin, ListenerPriority.LOWEST, packetType) {
						@Override
						public void onPacketReceiving(final PacketEvent event) {
							customPayloadModule.check(event);

							if (packetsModule.isEnabled())
								packetsModule.check(event);
						}
					});
				} else if (packetsModule.isEnabled()) {
					protocolManager.addPacketListener(new PacketAdapter(plugin, ListenerPriority.LOWEST, packetType) {
						@Override
						public void onPacketReceiving(final PacketEvent event) {
							packetsModule.check(event);
						}
					});
				}
			}
		}

		if (packetsModule.isEnabled()) {
			protocolManager.addPacketListener(new BlockDigPacketAdapter(plugin, ListenerPriority.LOWEST,
					PacketType.Play.Client.BLOCK_DIG, moduleManager));
			protocolManager.addPacketListener(new BlockPlacePacketAdapter(plugin, ListenerPriority.LOWEST,
					PacketType.Play.Client.BLOCK_PLACE, moduleManager));
			protocolManager.addPacketListener(new SetCreativeSlotPacketAdapter(plugin, ListenerPriority.LOWEST,
					PacketType.Play.Client.SET_CREATIVE_SLOT, moduleManager));
			protocolManager.addPacketListener(new WindowClickPacketAdapter(plugin, ListenerPriority.LOWEST,
					PacketType.Play.Client.WINDOW_CLICK, moduleManager));
		}
	}
}
