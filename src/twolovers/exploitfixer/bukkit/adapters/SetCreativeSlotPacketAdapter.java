package twolovers.exploitfixer.bukkit.adapters;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.reflect.StructureModifier;
import org.bukkit.GameMode;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.ItemsFixModule;
import twolovers.exploitfixer.interfaces.modules.PacketsModule;

import java.util.List;
import java.util.Map;

public class SetCreativeSlotPacketAdapter extends PacketAdapter {
	private final ModuleManager moduleManager;

	public SetCreativeSlotPacketAdapter(final Plugin plugin, final ModuleManager moduleManager) {
		super(plugin, PacketType.Play.Client.SET_CREATIVE_SLOT);
		this.moduleManager = moduleManager;
	}

	@Override
	public void onPacketReceiving(final PacketEvent event) {
		if (!event.isCancelled()) {
			final PacketsModule packetsModule = moduleManager.getPacketsModule();

			if (packetsModule.isEnabled()) {
				final Player player = event.getPlayer();

				if (player != null && player.isOnline()) {
					final ItemsFixModule itemsFixModule = moduleManager.getItemsFixModule();
					final double setCreativeSlot = packetsModule.getSetCreativeSlot();

					if (setCreativeSlot > 0 && player.getGameMode() != GameMode.CREATIVE) {
						final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager().get(player.getName());

						if (exploitPlayer != null)
							exploitPlayer.addVls(plugin, event, player, packetsModule, setCreativeSlot);
						else
							event.setCancelled(true);
					} else if (itemsFixModule.isEnabled()) {
						final StructureModifier<ItemStack> itemModifier = event.getPacket().getItemModifier();
						final ItemStack itemStack = itemModifier.readSafely(0);

						if (itemStack != null) {
							final Material material = itemStack.getType();
							final ItemMeta itemMeta = itemStack.getItemMeta();
							final int enchantLimit = itemsFixModule.getEnchantLimit();
							final ItemStack itemStackRemake = new ItemStack(material, itemStack.getAmount(), itemStack.getData().getData());

							if (enchantLimit > 0) {
								final Map<Enchantment, Integer> enchantments = itemStackRemake.getEnchantments();

								for (final Enchantment enchantment : enchantments.keySet())
									if (enchantments.get(enchantment) > enchantLimit)
										itemStackRemake.removeEnchantment(enchantment);
							} else {
								final Map<Enchantment, Integer> enchantments = itemStackRemake.getEnchantments();

								for (final Enchantment enchantment : enchantments.keySet())
									itemStackRemake.removeEnchantment(enchantment);
							}

							if (itemStack.hasItemMeta()) {
								final String displayName = itemMeta.getDisplayName();
								final List<String> lore = itemMeta.getLore();
								final ItemMeta newItemMeta = plugin.getServer().getItemFactory().getItemMeta(material);

								if (itemMeta instanceof BookMeta && newItemMeta instanceof BookMeta) {
									final BookMeta bookMeta = (BookMeta) itemMeta;
									final BookMeta newBookMeta = (BookMeta) newItemMeta;

									newBookMeta.setTitle(bookMeta.getTitle());
									newBookMeta.setAuthor(bookMeta.getAuthor());
									newBookMeta.setPages(bookMeta.getPages());
								}

								if (displayName != null && displayName.getBytes().length < 128)
									newItemMeta.setDisplayName(displayName);

								if (lore != null && lore.toString().getBytes().length < 1024)
									newItemMeta.setLore(lore);

								itemStackRemake.setItemMeta(newItemMeta);
							}

							itemModifier.write(0, itemStack);
						}
					}
				} else if (packetsModule.isOffline())
					event.setCancelled(true);
			}
		}
	}
}