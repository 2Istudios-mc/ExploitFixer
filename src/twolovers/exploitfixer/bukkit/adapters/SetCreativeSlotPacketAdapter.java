package twolovers.exploitfixer.bukkit.adapters;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.reflect.StructureModifier;

import org.bukkit.GameMode;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.Plugin;

import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.ItemsFixModule;
import twolovers.exploitfixer.interfaces.modules.PacketsModule;

public class SetCreativeSlotPacketAdapter extends PacketAdapter {
	private final ModuleManager moduleManager;

	public SetCreativeSlotPacketAdapter(final Plugin plugin, final ListenerPriority listenerPriority,
			final PacketType packetType, final ModuleManager moduleManager) {
		super(plugin, listenerPriority, packetType);
		this.moduleManager = moduleManager;
	}

	@Override
	public void onPacketReceiving(final PacketEvent event) {
		if (!event.isCancelled()) {
			final PacketsModule packetsModule = moduleManager.getPacketsModule();
			final Player player = event.getPlayer();

			if (player != null && player.isOnline()) {
				final ItemsFixModule itemsFixModule = moduleManager.getItemsFixModule();
				final double setCreativeSlot = packetsModule.getSetCreativeSlot();

				if (setCreativeSlot > 0 && player.getGameMode() != GameMode.CREATIVE) {
					try {
						final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager()
								.get(player.getUniqueId(), player);

						if (exploitPlayer != null)
							exploitPlayer.addVls(plugin, event, player, packetsModule, setCreativeSlot);
						else
							event.setCancelled(true);
					} catch (final UnsupportedOperationException ignored) {
						event.setCancelled(true);
					}
				} else if (itemsFixModule.isEnabled()) {
					final PacketContainer packet = event.getPacket();
					final StructureModifier<ItemStack> itemModifier = packet.getItemModifier();
					final ItemStack itemStack = itemModifier.readSafely(0);

					if (itemStack != null) {
						itemModifier.write(0, itemsFixModule.fixItemStack(itemStack));
					}
				}
			} else if (packetsModule.isOffline())
				event.setCancelled(true);

			if (!event.isCancelled() && packetsModule.isEnabled())
				packetsModule.check(event);
		}
	}
}