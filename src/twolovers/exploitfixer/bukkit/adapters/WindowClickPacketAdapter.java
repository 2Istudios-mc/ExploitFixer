package twolovers.exploitfixer.bukkit.adapters;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.reflect.StructureModifier;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.InventoryView;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.PacketsModule;

public class WindowClickPacketAdapter extends PacketAdapter {
	private final ModuleManager moduleManager;

	public WindowClickPacketAdapter(final Plugin plugin, final ModuleManager moduleManager) {
		super(plugin, PacketType.Play.Client.WINDOW_CLICK);
		this.moduleManager = moduleManager;
	}

	@Override
	public void onPacketReceiving(final PacketEvent event) {
		if (!event.isCancelled()) {
			final PacketsModule packetsModule = moduleManager.getPacketsModule();

			if (packetsModule.isEnabled()) {
				final double windowClick = packetsModule.getWindowClick();

				if (windowClick > 0) {
					final Player player = event.getPlayer();

					if (player != null && player.isOnline()) {
						final PacketContainer packet = event.getPacket();
						final StructureModifier<Integer> integers = packet.getIntegers();
						final InventoryView inventoryView = player.getOpenInventory();
						final String playerName = player.getName();

						if (inventoryView == null) {
							final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager().get(playerName);

							if (exploitPlayer != null)
								exploitPlayer.addVls(plugin, event, player, packetsModule, windowClick / 10); // Divide by 10 because of false positives
							else
								event.setCancelled(true);
						} else if (integers.size() > 1) {
							final Inventory topInventory = inventoryView.getTopInventory();
							final Inventory bottomInventory = inventoryView.getBottomInventory();
							final int slot = integers.readSafely(1);
							int maxSlots = inventoryView.countSlots();

							if (topInventory.getType() == InventoryType.CRAFTING && bottomInventory.getType() == InventoryType.PLAYER)
								maxSlots += 4;

							if (slot >= maxSlots) {
								final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager().get(playerName);

								if (exploitPlayer != null)
									exploitPlayer.addVls(plugin, event, player, packetsModule, windowClick);
								else
									event.setCancelled(true);
							} else {
								final StructureModifier<ItemStack> structureModifier = packet.getItemModifier();

								if (structureModifier.size() > 0 && slot > 0) {
									final ItemStack itemUse = structureModifier.readSafely(0);

									if (itemUse != null) {
										try {
											final ItemStack itemOnHand = inventoryView.getItem(slot);

											if ((!itemUse.isSimilar(itemOnHand) && itemUse.hasItemMeta() && itemUse.getItemMeta().toString().length() > 512)) {
												event.setCancelled(true);
											}
										} catch (final IndexOutOfBoundsException e) {
											final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager().get(playerName);

											if (exploitPlayer != null)
												exploitPlayer.addVls(plugin, event, player, packetsModule, windowClick);
											else
												event.setCancelled(true);
										}
									}
								}
							}
						}
					} else if (packetsModule.isOffline())
						event.setCancelled(true);
				}
			}
		}
	}
}