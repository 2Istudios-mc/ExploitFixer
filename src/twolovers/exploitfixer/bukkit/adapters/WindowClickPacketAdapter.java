package twolovers.exploitfixer.bukkit.adapters;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.reflect.StructureModifier;
import org.bukkit.entity.Player;
import org.bukkit.inventory.InventoryView;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.PacketsModule;

import java.nio.charset.StandardCharsets;
import java.util.UUID;

public class WindowClickPacketAdapter extends PacketAdapter {
	private final PacketsModule packetsModule;
	private final ExploitPlayerManager exploitPlayerManager;

	public WindowClickPacketAdapter(final Plugin plugin, final ListenerPriority listenerPriority, final PacketType packetType, final ModuleManager moduleManager) {
		super(plugin, listenerPriority, packetType);
		this.packetsModule = moduleManager.getPacketsModule();
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
	}

	@Override
	public void onPacketReceiving(final PacketEvent event) {
		if (!event.isCancelled()) {
			final double windowClick = packetsModule.getWindowClick();

			if (windowClick > 0) {
				final Player player = event.getPlayer();

				if (player != null && player.isOnline()) {
					try {
						final UUID uuid = player.getUniqueId();
						final PacketContainer packet = event.getPacket();
						final StructureModifier<Integer> integers = packet.getIntegers();
						final InventoryView inventoryView = player.getOpenInventory();

						if (inventoryView == null) {
							final ExploitPlayer exploitPlayer = exploitPlayerManager.get(uuid, player);

							exploitPlayer.addVls(plugin, event, player, packetsModule, windowClick / 10);
						} else if (integers.size() > 1) {
							final int slot = inventoryView.convertSlot(integers.readSafely(1));
							final int maxSlots = inventoryView.countSlots();

							if (slot >= maxSlots) {
								final ExploitPlayer exploitPlayer = exploitPlayerManager.get(uuid, player);

								exploitPlayer.addVls(plugin, event, player, packetsModule, windowClick);
							} else {
								final StructureModifier<ItemStack> structureModifier = packet.getItemModifier();

								if (structureModifier.size() > 0 && slot > 0) {
									final ItemStack itemUse = structureModifier.readSafely(0);

									if (itemUse != null) {
										final ItemStack itemOnHand = inventoryView.getItem(slot);

										if (!itemUse.isSimilar(itemOnHand) && itemUse.hasItemMeta()) {
											final ItemMeta itemMeta = itemUse.getItemMeta();
											int dataBytes = 0;

											try {
												dataBytes += itemMeta.toString().getBytes(StandardCharsets.UTF_8).length;
											} catch (final NullPointerException e) {
												dataBytes += (itemMeta.getClass().getName() + "@" + Integer.toHexString(itemMeta.hashCode())).getBytes(StandardCharsets.UTF_8).length;
											}

											if (dataBytes > 512) {
												final ExploitPlayer exploitPlayer = exploitPlayerManager.get(uuid, player);

												// Divide by 12 because of false positives.
												exploitPlayer.addVls(plugin, event, player, packetsModule, windowClick / 12);
											}
										}
									}
								}
							}
						}
					} catch (final UnsupportedOperationException ignored) {
						event.setCancelled(true);
					}
				} else if (packetsModule.isOffline())
					event.setCancelled(true);
			}

			if (!event.isCancelled())
				packetsModule.check(event);
		}
	}
}