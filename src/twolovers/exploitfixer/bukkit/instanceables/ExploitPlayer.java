package twolovers.exploitfixer.bukkit.instanceables;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import org.bukkit.Server;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.plugin.Plugin;

import hamsterapi.adapters.HamsterPlayer;
import hamsterapi.enums.PacketType;
import hamsterapi.wrappers.EventWrapper;
import twolovers.exploitfixer.bukkit.managers.ExploitPlayerManager;
import twolovers.exploitfixer.bukkit.managers.ModuleManager;
import twolovers.exploitfixer.bukkit.modules.MessagesModule;
import twolovers.exploitfixer.bukkit.modules.NotificationsModule;
import twolovers.exploitfixer.bukkit.utils.VersionUtil;
import twolovers.exploitfixer.shared.interfaces.ViolationModule;

public class ExploitPlayer {
	private final ExploitPlayerManager exploitPlayerManager;
	private final MessagesModule messagesModule;
	private final NotificationsModule notificationsModule;
	private final Map<ViolationModule, Double> violations = new HashMap<>();
	private final String name;
	private String onlineUUID = null;
	private double lastViolation = 0;
	private long teleportTimeMillis = System.currentTimeMillis();
	private int channels = 0;
	private boolean logged = false;

	public ExploitPlayer(final Plugin plugin, final String name, final ModuleManager moduleManager) {
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
		this.messagesModule = moduleManager.getMessagesModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
		this.name = name;
	}

	public int getChannels() {
		return channels;
	}

	public void clearChannels() {
		this.channels = 0;
	}

	public int addChannels(final int channels) {
		return this.channels += channels;
	}

	public double getViolations(final ViolationModule module) {
		return violations.getOrDefault(module, 0D);
	}

	public String getOnlineUUID() {
		if (onlineUUID == null) {
			try {
				final URLConnection connection = new URL("https://api.mojang.com/users/profiles/minecraft/" + name)
						.openConnection();

				connection.setDoOutput(true);
				connection.connect();

				final BufferedReader bufferedReader = new BufferedReader(
						new InputStreamReader(connection.getInputStream()));
				final StringBuilder response = new StringBuilder();

				String inputLine;

				while ((inputLine = bufferedReader.readLine()) != null)
					response.append(inputLine).append("\n");

				bufferedReader.close();
				onlineUUID = response.toString();
			} catch (final Exception ignored) {
			}
		}

		return onlineUUID;
	}

	public void addVls(final Plugin plugin, final Object event, final Player player, final ViolationModule module,
			final double amount) {
		if (player.isOnline()) {
			final Violations violations = (Violations) module.getViolations();

			if (violations != null) {
				final Server server = plugin.getServer();
				final double currentTime = System.currentTimeMillis();

				if (currentTime - lastViolation >= 1000) {
					lastViolation = currentTime;

					for (final ViolationModule violationModule : new HashSet<>(this.violations.keySet())) {
						final double vls = this.violations.get(violationModule) - violationModule.getReduceVls();

						if (vls <= 0)
							this.violations.remove(violationModule);
						else
							this.violations.put(violationModule, vls);
					}
				}

				final double oldVls = getViolations(module);
				final double newVls = oldVls + amount;

				this.violations.put(module, newVls);

				if (event instanceof Cancellable && module.getCancelVls() <= newVls) {
					((Cancellable) event).setCancelled(true);
				}

				for (final int threshold : violations.getViolations()) {
					if (threshold > oldVls && threshold <= newVls) {
						final Collection<String> commands = violations.getCommands(threshold);

						if (commands != null && !commands.isEmpty()) {
							for (final String punishCommand : commands) {
								if (punishCommand.equals("kick")) {
									final String locale;

									if (VersionUtil.isOneDotFifteen())
										locale = player.getLocale().substring(0, 2);
									else
										locale = player.spigot().getLocale().substring(0, 2);

									final String kickMessage = messagesModule.getKickMessage(module, locale);
									final HamsterPlayer hamsterPlayer = new HamsterPlayer(player);

									hamsterPlayer.kickPlayer(kickMessage);
									hamsterPlayer.abort();
									exploitPlayerManager.addPunishment();
								} else if (punishCommand.equals("notification")) {
									final String moduleName = module.getName();

									if (event instanceof EventWrapper) {
										final PacketType packetType = ((EventWrapper) event).getPacket().getType();
										final String name;

										if (packetType != null) {
											name = packetType.toString();
										} else {
											name = moduleName;
										}

										notificationsModule.sendNotification(name, player, (int) newVls);
									} else {
										notificationsModule.sendNotification(moduleName, player, (int) newVls);
									}
								} else {
									server.getScheduler().runTask(plugin, () -> {
										server.dispatchCommand(server.getConsoleSender(),
												punishCommand.replace("%player%", player.getName()));
									});
								}
							}
						}
					}
				}
			}
		} else if (event instanceof Cancellable) {
			((Cancellable) event).setCancelled(true);
		}
	}

	public void clearViolations() {
		violations.clear();
	}

	public void setLogged(final boolean logged) {
		this.logged = logged;
	}

	public boolean isLogged() {
		return logged;
	}

	public void updateTeleportTimeMillis() {
		this.teleportTimeMillis = System.currentTimeMillis();
	}

	public long getTeleportTimeMillis() {
		return this.teleportTimeMillis;
	}
}
