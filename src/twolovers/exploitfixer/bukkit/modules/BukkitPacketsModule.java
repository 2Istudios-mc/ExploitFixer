package twolovers.exploitfixer.bukkit.modules;

import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.reflect.StructureModifier;
import com.comphenix.protocol.wrappers.WrappedBlockData;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.bukkit.instanceables.BukkitThresholds;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.instanceables.Thresholds;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.PacketsModule;

import java.util.HashMap;
import java.util.Map;

public class BukkitPacketsModule implements PacketsModule {
	private final Plugin plugin;
	private final ModuleManager moduleManager;
	private final Map<String, Double> multipliers = new HashMap<>();
	private Thresholds thresholds;
	private boolean enabled, bigData, offline, windowClick, setCreativeSlot, blockPlace, blockDig;
	private int cancelVls, reduceVls;

	public BukkitPacketsModule(final Plugin plugin, final ModuleManager moduleManager, final Object configYml) {
		this.plugin = plugin;
		this.moduleManager = moduleManager;
		reload(configYml);
	}

	final public void reload(final Object configYml) {
		final YamlConfiguration configYml1 = (YamlConfiguration) configYml;
		final ConfigurationSection configurationSection = configYml1.getConfigurationSection("packets.multipliers");
		final String name = getName().toLowerCase();

		this.enabled = configYml1.getBoolean(name + ".enabled");
		this.cancelVls = configYml1.getInt(name + ".cancel_vls");
		this.reduceVls = configYml1.getInt(name + ".reduce_vls");
		this.bigData = configYml1.getBoolean(name + ".big_data");
		this.offline = configYml1.getBoolean(name + ".offline");
		this.windowClick = configYml1.getBoolean(name + ".window_click");
		this.blockPlace = configYml1.getBoolean(name + ".block_place");
		this.blockDig = configYml1.getBoolean(name + ".block_dig");
		this.setCreativeSlot = configYml1.getBoolean(name + ".set_creative_slot");
		this.thresholds = new BukkitThresholds(configYml1.getConfigurationSection(name + ".thresholds"));

		for (final String key : configurationSection.getKeys(false))
			multipliers.put(key, configurationSection.getDouble(key));
	}

	@Override
	public double getMultiplier(final String packetName) {
		return multipliers.getOrDefault(packetName, 1D);
	}

	@Override
	public boolean isEnabled() {
		return enabled;
	}

	@Override
	public void checkPacket(final Object packetEvent, String packetName) {
		final PacketEvent event = (PacketEvent) packetEvent;
		final Player player = event.getPlayer();

		if (bigData) {
			final PacketContainer packet = event.getPacket();
			final StructureModifier<ItemStack> itemModifier = packet.getItemModifier();
			final StructureModifier<WrappedBlockData> blockDataModifier = packet.getBlockData();
			final int itemModifierSize = itemModifier.size();
			final int blockDataModifierSize = blockDataModifier.size();
			int packetSize = 0;

			if (itemModifierSize > 75 || blockDataModifierSize > 75)
				event.setCancelled(true);
			else {
				if (itemModifierSize > 0)
					for (int i = 0; i < itemModifier.size(); i++) {
						final ItemStack itemStack = itemModifier.readSafely(i);

						if (itemStack != null) {
							int dataBytes = itemStack.getData().toString().getBytes().length;

							if (itemStack.hasItemMeta())
								dataBytes += itemStack.getItemMeta().toString().getBytes().length;

							packetSize += dataBytes;
						}
					}

				if (blockDataModifierSize > 0)
					for (int i = 0; i < blockDataModifier.size(); i++) {
						final WrappedBlockData blockData = blockDataModifier.readSafely(i);

						if (blockData != null) {
							int dataBytes = blockData.toString().getBytes().length;

							packetSize += dataBytes;
						}
					}

				if (packetSize > 20000)
					event.setCancelled(true);
			}
		}

		if (!event.isCancelled() && player != null && player.isOnline()) {
			final String playerName = player.getName();
			final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager().get(playerName);

			if (exploitPlayer != null)
				exploitPlayer.addVls(plugin, event, player, this, getMultiplier(packetName));
			else if (isOffline())
				event.setCancelled(true);
		} else if (isOffline())
			event.setCancelled(true);
	}

	@Override
	public boolean isWindowClick() {
		return windowClick;
	}

	@Override
	public boolean isBigData() {
		return bigData;
	}

	@Override
	public boolean isOffline() {
		return offline;
	}

	@Override
	public boolean isSetCreativeSlot() {
		return setCreativeSlot;
	}

	@Override
	public boolean isBlockPlace() {
		return blockPlace;
	}

	@Override
	public boolean isBlockDig() {
		return blockDig;
	}

	@Override
	public String getName() {
		return "Packets";
	}

	@Override
	public int getCancelVls() {
		return cancelVls;
	}

	@Override
	public int getReduceVls() {
		return reduceVls;
	}

	public Thresholds getThresholds() {
		return thresholds;
	}
}
