package twolovers.exploitfixer.bukkit.modules;

import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.reflect.StructureModifier;
import com.comphenix.protocol.wrappers.WrappedBlockData;
import com.comphenix.protocol.wrappers.nbt.NbtBase;
import io.netty.buffer.ByteBuf;
import org.bukkit.block.BlockState;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.bukkit.instanceables.BukkitViolations;
import twolovers.exploitfixer.bukkit.utils.VersionUtil;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.instanceables.Violations;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.PacketsModule;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

public class BukkitPacketsModule implements PacketsModule {
	private final Plugin plugin;
	private final ModuleManager moduleManager;
	private final Map<String, Double> multipliers = new HashMap<>();
	private Violations violations;
	private double bigDataVls, bigDataMaxBytes, blockDig, blockPlace, setCreativeSlot, windowClick, cancelVls, reduceVls, booksVls;
	private int booksMaxBytes;
	private boolean enabled, offline;

	public BukkitPacketsModule(final Plugin plugin, final ModuleManager moduleManager, final Object configYml) {
		this.plugin = plugin;
		this.moduleManager = moduleManager;
		reload(configYml);
	}

	final public void reload(final Object configYml) {
		final YamlConfiguration configYml1 = (YamlConfiguration) configYml;
		final ConfigurationSection configurationSection = configYml1.getConfigurationSection("packets.multipliers");
		final String name = getName().toLowerCase();

		this.enabled = configYml1.getBoolean(name + ".enabled");
		this.cancelVls = configYml1.getDouble(name + ".cancel_vls");
		this.reduceVls = configYml1.getDouble(name + ".reduce_vls");
		this.offline = configYml1.getBoolean(name + ".invalid.offline");
		this.booksVls = configYml1.getDouble(name + ".invalid.books.vls");
		this.booksMaxBytes = configYml1.getInt(name + ".invalid.books.max_bytes");
		this.bigDataVls = configYml1.getDouble(name + ".invalid.big_data.vls");
		this.bigDataMaxBytes = configYml1.getDouble(name + ".invalid.big_data.max_bytes");
		this.windowClick = configYml1.getDouble(name + ".invalid.window_click");
		this.blockPlace = configYml1.getDouble(name + ".invalid.block_place");
		this.blockDig = configYml1.getDouble(name + ".invalid.block_dig");
		this.setCreativeSlot = configYml1.getDouble(name + ".invalid.set_creative_slot");
		this.violations = new BukkitViolations(configYml1.getConfigurationSection(name + ".violations"));

		for (final String key : configurationSection.getKeys(false))
			multipliers.put(key, configurationSection.getDouble(key));
	}

	@Override
	public double getMultiplier(final String packetName) {
		return multipliers.getOrDefault(packetName, 1D);
	}

	@Override
	public boolean isEnabled() {
		return enabled;
	}

	@Override
	public void checkPacket(final Object packetEvent, final String packetName) {
		final PacketEvent event = (PacketEvent) packetEvent;
		final Player player = event.getPlayer();

		if (player != null && player.isOnline()) {
			final String playerName = player.getName();
			final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager().get(playerName);

			if (bigDataVls > 0) {
				final PacketContainer packet = event.getPacket();
				final StructureModifier<ItemStack> itemModifier = packet.getItemModifier();
				final StructureModifier<WrappedBlockData> blockDataModifier = packet.getBlockData();
				final StructureModifier<Long> longs = packet.getLongs();
				final StructureModifier<String> strings = packet.getStrings();
				final StructureModifier<NbtBase<?>> nbtModifier = packet.getNbtModifier();
				final AtomicInteger packetSize = new AtomicInteger(0);

				if (itemModifier.size() > 50 || blockDataModifier.size() > 50 || longs.size() > 50 || strings.size() > 50 || nbtModifier.size() > 50) {
					if (exploitPlayer != null)
						exploitPlayer.addVls(plugin, event, player, this, bigDataVls);
					else
						event.setCancelled(true);
				} else {
					for (final ItemStack itemStack : itemModifier.getValues()) {
						if (checkItem(itemStack, event, exploitPlayer, player, packetSize))
							break;
					}

					if (!event.isCancelled()) {
						for (final WrappedBlockData blockData : blockDataModifier.getValues()) {
							if (blockData != null) {
								int dataBytes = blockData.toString().getBytes(StandardCharsets.UTF_8).length;

								packetSize.addAndGet(dataBytes);
							}
						}

						for (final String string : strings.getValues()) {
							if (string != null) {
								int dataBytes = string.getBytes(StandardCharsets.UTF_8).length;

								packetSize.addAndGet(dataBytes);
							}
						}

						for (final NbtBase<?> nbtBase : nbtModifier.getValues()) {
							if (nbtBase != null) {
								int dataBytes = nbtBase.getValue().toString().length();

								packetSize.addAndGet(dataBytes);
							}
						}

						if (!VersionUtil.isOneDotSeven()) {
							final StructureModifier<ByteBuf> byteBufModifier = packet.getSpecificModifier(ByteBuf.class);

							for (final ByteBuf byteBuf : byteBufModifier.getValues()) {
								if (byteBuf != null)
									packetSize.addAndGet(byteBuf.capacity());
							}
						}

						if (packetSize.get() > bigDataMaxBytes) {
							if (exploitPlayer != null) {
								exploitPlayer.addVls(plugin, event, player, this, bigDataVls);
							} else
								event.setCancelled(true);
						}
					}
				}
			}

			if (!event.isCancelled() && exploitPlayer != null)
				exploitPlayer.addVls(plugin, event, player, this, getMultiplier(packetName));
		}
	}

	@Override
	public boolean isOffline() {
		return offline;
	}

	@Override
	public double getWindowClick() {
		return windowClick;
	}

	@Override
	public double getSetCreativeSlot() {
		return setCreativeSlot;
	}

	@Override
	public double getBlockDig() {
		return blockDig;
	}

	@Override
	public double getBlockPlace() {
		return blockPlace;
	}

	@Override
	public String getName() {
		return "Packets";
	}

	@Override
	public double getCancelVls() {
		return cancelVls;
	}

	@Override
	public double getReduceVls() {
		return reduceVls;
	}

	@Override
	public Violations getViolations() {
		return violations;
	}

	public boolean checkItem(final ItemStack itemStack, final PacketEvent event, final ExploitPlayer exploitPlayer, final Player player, final AtomicInteger packetSize) {
		if (itemStack != null && !event.isCancelled()) {
			final ItemMeta itemMeta = itemStack.getItemMeta();
			int dataBytes = itemStack.getData().toString().getBytes(StandardCharsets.UTF_8).length;

			if (itemMeta != null) {
				try {
					dataBytes += itemMeta.toString().getBytes(StandardCharsets.UTF_8).length;
				} catch (final NullPointerException e) {
					dataBytes += (itemMeta.getClass().getName() + "@" + Integer.toHexString(itemMeta.hashCode())).getBytes(StandardCharsets.UTF_8).length;
				}

				if (itemMeta instanceof BlockStateMeta) {
					final BlockStateMeta blockStateMeta = (BlockStateMeta) itemMeta;

					if (blockStateMeta.hasBlockState()) {
						final BlockState blockState = blockStateMeta.getBlockState();

						if (blockState instanceof InventoryHolder) {
							final InventoryHolder inventoryHolder = (InventoryHolder) blockState;

							for (final ItemStack itemStack1 : inventoryHolder.getInventory().getContents())
								checkItem(itemStack1, event, exploitPlayer, player, packetSize);
						}
					}
				} else if (booksVls > 0 && itemMeta instanceof BookMeta) {
					final BookMeta bookMeta = (BookMeta) itemMeta;

					if (bookMeta.getPageCount() > 50) {
						if (exploitPlayer != null)
							exploitPlayer.addVls(plugin, event, player, this, booksVls);
						else
							event.setCancelled(true);
					} else {
						for (String page : bookMeta.getPages()) {

							if (page.getBytes(StandardCharsets.UTF_8).length > booksMaxBytes) {
								if (exploitPlayer != null)
									exploitPlayer.addVls(plugin, event, player, this, booksVls);
								else
									event.setCancelled(true);
							}
						}
					}
				}
			}

			packetSize.addAndGet(dataBytes);

			return false;
		} else
			return true;
	}
}
