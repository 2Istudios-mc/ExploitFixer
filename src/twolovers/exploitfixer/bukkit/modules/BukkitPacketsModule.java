package twolovers.exploitfixer.bukkit.modules;

import com.comphenix.protocol.events.PacketEvent;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.PacketsModule;
import twolovers.exploitfixer.shared.enums.Identity;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BukkitPacketsModule implements PacketsModule {
	private final ModuleManager moduleManager;
	private final Map<Identity, Integer> limits = new HashMap<>();
	private boolean enabled;

	public BukkitPacketsModule(final ModuleManager moduleManager, final Object configYml) {
		this.moduleManager = moduleManager;
		reload(configYml);
	}

	final public void reload(final Object configYml) {
		final YamlConfiguration configYml1 = (YamlConfiguration) configYml;
		final ConfigurationSection configurationSection = configYml1.getConfigurationSection("packets");

		this.enabled = configYml1.getBoolean("packets.enabled");

		for (final String packetIdentityName : configurationSection.getKeys(false)) {
			for (final Identity identity : Identity.values()) {
				if (identity.name().equalsIgnoreCase(packetIdentityName)) {
					final Object value = configurationSection.get(packetIdentityName);

					if (value instanceof Integer)
						addLimit(identity, (Integer) value);

					break;
				}
			}
		}
	}

	private void addLimit(final Identity packet, final int value) {
		this.limits.put(packet, value);
	}

	final public int getLimit(final Identity packet) {
		return limits.getOrDefault(packet, 999999);
	}

	public boolean isEnabled() {
		return enabled;
	}

	public void checkPacket(Object packetEvent, Identity identity) {
		if (isEnabled() && packetEvent instanceof PacketEvent) {
			final PacketEvent event = (PacketEvent) packetEvent;

			if (!event.isCancelled()) {
				final Player player = event.getPlayer();

				if (player != null) {
					final String playerName = player.getName();
					final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager().getPlayer(playerName);

					if (exploitPlayer != null) {
						final int limit = getLimit(identity);

						if (limit > 0) {
							exploitPlayer.addViolation(identity);

							final int violations = exploitPlayer.getViolations(identity);

							if (violations == limit)
								moduleManager.getNotificationsModule().sendNotification(identity.name(), player);
							else if (violations > limit)
								event.setCancelled(true);
						}
					}
				}
			}
		}
	}

	public List<String> getPunishCommands() {
		return null;
	}

	public String getName() {
		return "Packets";
	}
}
