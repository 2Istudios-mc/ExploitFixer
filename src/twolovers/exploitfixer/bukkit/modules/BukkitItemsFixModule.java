package twolovers.exploitfixer.bukkit.modules;

import java.util.List;
import java.util.Map;

import org.bukkit.Material;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.Plugin;

import twolovers.exploitfixer.interfaces.modules.ItemsFixModule;

public class BukkitItemsFixModule implements ItemsFixModule {
	private final Plugin plugin;
	private boolean enabled;
	private int enchantLimit, maxStackSize;

	public BukkitItemsFixModule(final Plugin plugin, final Object configYml) {
		this.plugin = plugin;
		reload(configYml);
	}

	@Override
	final public void reload(final Object configYml) {
		final YamlConfiguration configYml1 = (YamlConfiguration) configYml;
		final String name = getName().toLowerCase();

		this.enabled = configYml1.getBoolean(name + ".enabled");
		this.enchantLimit = configYml1.getInt(name + ".enchant_limit");
		this.maxStackSize = configYml1.getInt(name + ".max_stack_size");
	}

	@Override
	final public boolean isEnabled() {
		return enabled;
	}

	@Override
	public String getName() {
		return "ItemsFix";
	}

	@Override
	public int getEnchantLimit() {
		return enchantLimit;
	}

	@Override
	public int getMaxStackSize() {
		return maxStackSize;
	}

	@Override
	public ItemStack fixItemStack(final ItemStack itemStack) {
		if (itemStack != null) {
			final Material material = Material.getMaterial(itemStack.getType().name());
			final ItemMeta itemMeta = itemStack.getItemMeta();
			final int enchantLimit = getEnchantLimit();
			final ItemMeta newItemMeta = plugin.getServer().getItemFactory().getItemMeta(material);

			if (enchantLimit > 0) {
				final Map<Enchantment, Integer> enchantments = itemStack.getEnchantments();

				for (final Enchantment enchantment : enchantments.keySet())
					if (enchantments.get(enchantment) > enchantLimit)
						itemStack.removeEnchantment(enchantment);
			} else {
				final Map<Enchantment, Integer> enchantments = itemStack.getEnchantments();

				for (final Enchantment enchantment : enchantments.keySet())
					itemStack.removeEnchantment(enchantment);
			}

			if (itemStack.hasItemMeta()) {
				final String displayName = itemMeta.getDisplayName();
				final List<String> lore = itemMeta.getLore();
				final int maxStackSize = getMaxStackSize();

				if (itemMeta instanceof BookMeta && newItemMeta instanceof BookMeta) {
					final BookMeta bookMeta = (BookMeta) itemMeta;
					final BookMeta newBookMeta = (BookMeta) newItemMeta;

					newBookMeta.setTitle(bookMeta.getTitle());
					newBookMeta.setAuthor(bookMeta.getAuthor());
					newBookMeta.setPages(bookMeta.getPages());
				}

				if (maxStackSize != 0 && itemStack.getAmount() > maxStackSize)
					itemStack.setAmount(maxStackSize);

				if (displayName != null && displayName.getBytes().length < 128)
					newItemMeta.setDisplayName(displayName);

				if (lore != null && lore.toString().getBytes().length < 1024)
					newItemMeta.setLore(lore);
			}

			itemStack.setType(material);
			itemStack.setItemMeta(newItemMeta);
		}

		return itemStack;
	}
}
