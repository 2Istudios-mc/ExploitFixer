package twolovers.exploitfixer.bukkit.modules;

import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.comphenix.protocol.reflect.StructureModifier;
import com.google.common.base.Charsets;
import io.netty.buffer.ByteBuf;

import org.bukkit.Material;
import org.bukkit.configuration.Configuration;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.bukkit.instanceables.BukkitViolations;
import twolovers.exploitfixer.bukkit.utils.VersionUtil;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.instanceables.Violations;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.CustomPayloadModule;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class BukkitCustomPayloadModule implements CustomPayloadModule {
	private Map<String, Double> multipliers = new HashMap<>();
	private Plugin plugin;
	private ModuleManager moduleManager;
	private Violations violations;
	private int maxChannelsAmount, bigDataMaxBytes;
	private double cancelVls, reduceVls, booksVls, booksMaxBytes, maxChannelsVls, bigDataVls;
	private boolean enabled;

	public BukkitCustomPayloadModule(final Plugin plugin, final ModuleManager moduleManager, final Object configYml) {
		this.plugin = plugin;
		this.moduleManager = moduleManager;

		reload(configYml);
	}

	@Override
	public double getCancelVls() {
		return cancelVls;
	}

	@Override
	public double getReduceVls() {
		return reduceVls;
	}

	@Override
	public Violations getViolations() {
		return violations;
	}

	@Override
	public String getName() {
		return "CustomPayload";
	}

	@Override
	final public boolean isEnabled() {
		return enabled;
	}

	@Override
	public void reload(final Object configYml) {
		final Configuration configYml1 = (Configuration) configYml;
		final ConfigurationSection configurationSection = configYml1
				.getConfigurationSection("custompayload.multipliers");
		final String name = getName().toLowerCase();

		this.enabled = configYml1.getBoolean(name + ".enabled");
		this.cancelVls = configYml1.getDouble(name + ".cancel_vls");
		this.reduceVls = configYml1.getDouble(name + ".reduce_vls");
		this.booksVls = configYml1.getDouble(name + ".invalid.books.vls");
		this.booksMaxBytes = configYml1.getInt(name + ".invalid.books.max_bytes");
		this.violations = new BukkitViolations(configYml1.getConfigurationSection(name + ".violations"));
		this.maxChannelsVls = configYml1.getDouble(name + ".invalid.max_channels.vls");
		this.maxChannelsAmount = configYml1.getInt(name + ".invalid.max_channels.amount");
		this.bigDataVls = configYml1.getDouble(name + ".invalid.big_data.vls");
		this.bigDataMaxBytes = configYml1.getInt(name + ".invalid.big_data.max_bytes");

		for (final String key : configurationSection.getKeys(false))
			multipliers.put(key, configurationSection.getDouble(key));
	}

	@Override
	public void check(final Object eventObject) {
		if (eventObject instanceof PacketEvent) {
			final PacketEvent event = (PacketEvent) eventObject;

			if (!event.isCancelled()) {
				final Player player = event.getPlayer();

				if (player != null && player.isOnline()) {
					final PacketContainer packet = event.getPacket();
					final StructureModifier<String> packetStrings = packet.getStrings();
					final String tag = packetStrings.readSafely(0);

					if (tag != null) {
						if (tag.endsWith("BEdit") || tag.endsWith("BOpen") || tag.endsWith("BSign")) {
							final PlayerInventory playerInventory = player.getInventory();
							final ItemStack heldItem = playerInventory.getItem(playerInventory.getHeldItemSlot());

							if (heldItem != null) {
								final Material heldItemType = heldItem.getType();

								if (heldItemType != Material.BOOK_AND_QUILL && heldItemType != Material.WRITTEN_BOOK) {
									event.setCancelled(true);
								}
							}
						}

						if (!event.isCancelled()) {
							if (!VersionUtil.isOneDotSeven()) {
								final StructureModifier<ByteBuf> byteBufModifier = packet
										.getSpecificModifier(ByteBuf.class);
								final ByteBuf byteBufModifier0 = byteBufModifier.readSafely(0);
								final String content = byteBufModifier0.toString(Charsets.UTF_8);

								if (content != null) {
									try {
										final UUID uuid = player.getUniqueId();
										final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager()
												.get(uuid, player);
										final String[] pages = content.split("\000");

										if ((tag.endsWith("BEdit") || tag.endsWith("BSign") || tag.endsWith("BOpen"))
												&& checkPages(event, exploitPlayer, player, pages)) {
											exploitPlayer.addVls(plugin, eventObject, player, this, booksVls);
										} else if (tag.endsWith("Register") && pages.length > maxChannelsAmount) {
											exploitPlayer.addVls(plugin, eventObject, player, this, maxChannelsVls);
										}

										if (!event.isCancelled()) {
											if (content.length() > bigDataMaxBytes) {
												exploitPlayer.addVls(plugin, eventObject, player, this,
														multipliers.getOrDefault(tag, bigDataVls));
											} else {
												exploitPlayer.addVls(plugin, eventObject, player, this, multipliers
														.getOrDefault(tag, multipliers.getOrDefault("OTHER", 1D)));
											}
										}
									} catch (final UnsupportedOperationException e) {
										event.setCancelled(true);
									}
								} else {
									event.setCancelled(true);
								}
							}
						} else {
							event.setCancelled(true);
						}
					}
				}
			}
		}
	}

	private boolean checkPages(final Cancellable event, final ExploitPlayer exploitPlayer, final Player player,
			final String[] pages) {

		if (pages.length - 9 > 50) {
			return true;
		} else
			for (final String page : pages) {
				if (page.getBytes(StandardCharsets.UTF_8).length > booksMaxBytes) {
					return true;
				}
			}

		return false;
	}
}
