package twolovers.exploitfixer.bukkit.modules;

import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import com.google.common.base.Charsets;
import io.netty.buffer.ByteBuf;
import org.bukkit.configuration.Configuration;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.entity.Player;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.bukkit.instanceables.BukkitThresholds;
import twolovers.exploitfixer.bukkit.utils.VersionUtil;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.instanceables.Thresholds;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.CustomPayloadModule;

import java.util.HashMap;
import java.util.Map;

public class BukkitCustomPayloadModule implements CustomPayloadModule {
	private Map<String, Double> multipliers = new HashMap<>();
	private Plugin plugin;
	private ModuleManager moduleManager;
	private Thresholds thresholds;
	private int maxChannels;
	private int cancelVls, reduceVls;
	private boolean enabled;

	public BukkitCustomPayloadModule(final Plugin plugin, final ModuleManager moduleManager, final Object configYml) {
		this.plugin = plugin;
		this.moduleManager = moduleManager;

		reload(configYml);
	}

	@Override
	public int getCancelVls() {
		return cancelVls;
	}

	@Override
	public int getReduceVls() {
		return reduceVls;
	}

	@Override
	public Thresholds getThresholds() {
		return thresholds;
	}

	@Override
	public String getName() {
		return "CustomPayload";
	}

	@Override
	final public boolean isEnabled() {
		return enabled;
	}

	@Override
	public void reload(final Object configYml) {
		final Configuration configYml1 = (Configuration) configYml;
		final ConfigurationSection configurationSection = configYml1.getConfigurationSection("custompayload.multipliers");
		final String name = getName().toLowerCase();

		this.enabled = configYml1.getBoolean(name + ".enabled");
		this.cancelVls = configYml1.getInt(name + ".cancel_vls");
		this.reduceVls = configYml1.getInt(name + ".reduce_vls");
		this.thresholds = new BukkitThresholds(configYml1.getConfigurationSection(name + ".thresholds"));
		this.maxChannels = configYml1.getInt("custompayload.max_channels");

		for (final String key : configurationSection.getKeys(false))
			multipliers.put(key, configurationSection.getDouble(key));
	}

	@Override
	public void checkPacket(final Object event) {
		if (event instanceof PacketEvent) {
			final PacketEvent packetEvent = (PacketEvent) event;
			final Player sender = packetEvent.getPlayer();
			final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager().get(sender.getName());

			if (exploitPlayer != null && sender.isOnline()) {
				final PacketContainer packet = packetEvent.getPacket();
					final String tag = String.valueOf(packet.getModifier().readSafely(0));

					if (tag != null && tag.toLowerCase().endsWith("register")) {
						final ByteBuf buffer = packet.getSpecificModifier(ByteBuf.class).readSafely(0);
						final int channels;

						if (VersionUtil.isOneDotSeven())
							channels = 1;
						else
							channels = buffer.toString(Charsets.UTF_8).split("\000").length;

						if (exploitPlayer.addChannels(channels) > maxChannels)
							exploitPlayer.addVls(plugin, event, sender, this, multipliers.getOrDefault("MAX_CHANNELS", multipliers.getOrDefault("OTHER", 1D)));
					} else
						exploitPlayer.addVls(plugin, event, sender, this, multipliers.getOrDefault(tag, multipliers.getOrDefault("OTHER", 1D)));
				} /*else if (moduleManager.getPacketsModule().isOffline())
					packetEvent.setCancelled(true);*/ // Disabled because of false positives
		}
	}
}
