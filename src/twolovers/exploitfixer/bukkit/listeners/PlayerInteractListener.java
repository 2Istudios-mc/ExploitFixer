package twolovers.exploitfixer.bukkit.listeners;

import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.NotificationsModule;
import twolovers.exploitfixer.interfaces.modules.PacketsModule;
import twolovers.exploitfixer.shared.enums.Identity;

public class PlayerInteractListener implements Listener {
	private final ExploitPlayerManager exploitPlayerManager;
	private final PacketsModule packetsModule;
	private final NotificationsModule notificationsModule;

	public PlayerInteractListener(final ModuleManager moduleManager) {
		this.packetsModule = moduleManager.getPacketsModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
		exploitPlayerManager = moduleManager.getExploitPlayerManager();
	}

	@EventHandler
	public void onPlayerInteract(final PlayerInteractEvent event) {
		if (!event.isCancelled() && packetsModule.isEnabled()) {
			final Player player = event.getPlayer();
			final String playerName = player.getName();
			final ItemStack item = event.getItem();

			if (item != null && (item.getType() == Material.WRITTEN_BOOK || item.getType() == Material.BOOK_AND_QUILL)) {
				final ExploitPlayer exploitPlayer = exploitPlayerManager.getPlayer(playerName);
				final Identity identifier = Identity.INTERACT_BOOK;

				exploitPlayer.addViolation(identifier);

				final int violations = exploitPlayer.getViolations(identifier);

				if (violations == packetsModule.getLimit(identifier))
					notificationsModule.sendNotification(identifier.name(), player);
				if (exploitPlayer.getViolations(identifier) > packetsModule.getLimit(identifier))
					event.setCancelled(true);
			} else {
				final ExploitPlayer exploitPlayer = exploitPlayerManager.getPlayer(playerName);
				final Identity identifier = Identity.INTERACT;

				exploitPlayer.addViolation(identifier);

				final int violations = exploitPlayer.getViolations(identifier);

				if (violations == packetsModule.getLimit(identifier))
					notificationsModule.sendNotification(identifier.name(), player);
				if (violations > packetsModule.getLimit(identifier))
					event.setCancelled(true);
			}
		}
	}
}