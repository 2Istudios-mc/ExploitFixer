package twolovers.exploitfixer.bukkit.listeners;

import org.bukkit.entity.HumanEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryCreativeEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.inventory.meta.PotionMeta;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.InventoryModule;
import twolovers.exploitfixer.shared.enums.Identity;

public class InventoryCreativeListener implements Listener {
	private final Plugin plugin;
	private final InventoryModule inventoryModule;
	private final ExploitPlayerManager exploitPlayerManager;

	public InventoryCreativeListener(final Plugin plugin, final ModuleManager moduleManager) {
		this.plugin = plugin;
		this.inventoryModule = moduleManager.getInventoryModule();
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
	}

	@EventHandler(ignoreCancelled = true)
	public void onInventoryCreative(final InventoryCreativeEvent event) {
		final HumanEntity whoClicked = event.getWhoClicked();

		if (inventoryModule.isEnabled() && whoClicked instanceof Player) {
			final Player player = (Player) event.getWhoClicked();
			final ExploitPlayer exploitPlayer = exploitPlayerManager.getPlayer(player.getName());
			final ItemStack itemStack = event.getCursor();
			final ItemMeta itemMeta = itemStack.getItemMeta();

			exploitPlayer.addViolation(Identity.INVENTORY_CREATIVE);

			if (exploitPlayer.getViolations(Identity.INVENTORY_CREATIVE) > 20)
				event.setCancelled(true);
			else {
				if (itemStack.hasItemMeta() && itemMeta instanceof PotionMeta && !((PotionMeta) itemMeta).getCustomEffects().isEmpty())
					event.setCancelled(true);

				if (!event.isCancelled() && itemMeta != null) {
					final int itemMetaLenght = itemMeta.toString().length();

					if (itemMetaLenght > 16384) {
						event.setCancelled(true);
						exploitPlayer.punish(plugin, inventoryModule, player);
					} else if ((itemMeta.hasDisplayName() && itemMeta.getDisplayName().length() > 32) || (itemMeta.hasLore() && itemMeta.getLore().size() > 16)) {
						event.setCancelled(true);
						exploitPlayer.punish(plugin, inventoryModule, player);
					}
				}

				if (!event.isCancelled() && !itemStack.getEnchantments().isEmpty()) {
					for (int enchantmentLevel : itemStack.getEnchantments().values()) {
						if (enchantmentLevel > 10) {
							event.setCancelled(true);
							exploitPlayerManager.getPlayer(player.getName()).punish(plugin, inventoryModule, player);
							break;
						}
					}
				}
			}
		}
	}
}