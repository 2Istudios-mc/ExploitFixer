package twolovers.exploitfixer.bukkit.listeners.initializers;

import java.util.logging.Logger;

import org.bukkit.Server;
import org.bukkit.event.HandlerList;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.PluginManager;

import hamsterapi.HamsterAPI;
import hamsterapi.handlers.DecodeEventHandler;
import twolovers.exploitfixer.bukkit.listeners.ExploitFixerDecodeListener;
import twolovers.exploitfixer.bukkit.listeners.PlayerCommandListener;
import twolovers.exploitfixer.bukkit.listeners.PlayerLoginListener;
import twolovers.exploitfixer.bukkit.listeners.PlayerQuitListener;
import twolovers.exploitfixer.bukkit.listeners.PlayerTeleportListener;
import twolovers.exploitfixer.bukkit.managers.ModuleManager;

public class ListenerInitializer {
	private final Plugin plugin;
	private final ModuleManager moduleManager;
	private final ExploitFixerDecodeListener exploitFixerDecodeListener;

	public ListenerInitializer(final Plugin plugin, final ModuleManager moduleManager) {
		this.plugin = plugin;
		this.moduleManager = moduleManager;
		this.exploitFixerDecodeListener = new ExploitFixerDecodeListener(plugin, moduleManager);
	}

	public void start() {
		final Logger logger = this.plugin.getLogger();
		final Server server = this.plugin.getServer();
		final PluginManager pluginManager = server.getPluginManager();
		final DecodeEventHandler decodeEventHandler = HamsterAPI.getDecodeEventHandler();

		if (pluginManager.isPluginEnabled("HamsterAPI")) {
			decodeEventHandler.addListener(exploitFixerDecodeListener);
			logger.info("Successfully hooked with HamsterAPI!");
		} else {
			for (int i = 0; i < 10; i++) {
				logger.severe("ExploitFixer requires HamsterAPI to protect agaisnt exploits!");
			}
		}

		pluginManager.registerEvents(new PlayerCommandListener(plugin, moduleManager), plugin);
		pluginManager.registerEvents(new PlayerLoginListener(plugin, moduleManager), plugin);
		pluginManager.registerEvents(new PlayerQuitListener(moduleManager), plugin);
		pluginManager.registerEvents(new PlayerTeleportListener(moduleManager), plugin);
	}

	public void stop() {
		final DecodeEventHandler decodeEventHandler = HamsterAPI.getDecodeEventHandler();

		decodeEventHandler.removeListener(exploitFixerDecodeListener);
		HandlerList.unregisterAll(plugin);
	}
}
