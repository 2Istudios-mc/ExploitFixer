package twolovers.exploitfixer.bukkit.listeners;

import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerLoginEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.scheduler.BukkitScheduler;
import twolovers.exploitfixer.bukkit.utils.VersionUtil;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.MessagesModule;
import twolovers.exploitfixer.interfaces.modules.Module;
import twolovers.exploitfixer.interfaces.modules.NotificationsModule;

import java.net.InetAddress;
import java.util.UUID;

public class PlayerLoginListener implements Listener {
	private final Plugin plugin;
	private final NotificationsModule notificationsModule;
	private final MessagesModule messagesModule;
	private final Module uuidSpoofModule, nullAddressModule;
	private final ExploitPlayerManager exploitPlayerManager;

	public PlayerLoginListener(final Plugin plugin, final ModuleManager moduleManager) {
		this.plugin = plugin;
		this.uuidSpoofModule = moduleManager.getUUIDSpoofModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
		this.messagesModule = moduleManager.getMessagesModule();
		this.nullAddressModule = moduleManager.getNullAddressModule();
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
	}

	@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
	public void onPlayerLogin(final PlayerLoginEvent event) {
		final Player player = event.getPlayer();
		final InetAddress address = event.getAddress();
		final String locale;

		if (VersionUtil.isOneDotFifteen())
			locale = player.getLocale().substring(0, 2);
		else
			locale = player.spigot().getLocale().substring(0, 2);

		if (nullAddressModule.isEnabled() && address == null) {
			final String nullAddressKickMessage = messagesModule.getKickMessage(nullAddressModule, locale);

			event.setKickMessage(nullAddressKickMessage);
			event.setResult(PlayerLoginEvent.Result.KICK_OTHER);
			player.kickPlayer(nullAddressKickMessage);
		} else {
			final UUID uuid = player.getUniqueId();
			final ExploitPlayer exploitPlayer = exploitPlayerManager.get(uuid, player);

			if (uuidSpoofModule.isEnabled()) {
				final BukkitScheduler scheduler = plugin.getServer().getScheduler();
				final String playerName = player.getName();

				scheduler.runTaskAsynchronously(plugin, () -> {
					final String originalUUID = uuid.toString().replace("-", "");
					final String offlineUUID = UUID.nameUUIDFromBytes(("OfflinePlayer:" + playerName).getBytes()).toString().replace("-", "");

					if (!originalUUID.contains(offlineUUID)) {
						final String onlineUUID = exploitPlayer.getOnlineUUID();

						if (onlineUUID == null || !onlineUUID.contains(originalUUID)) {
							final String uuidSpoofKickMessage = messagesModule.getKickMessage(uuidSpoofModule, locale);

							scheduler.runTaskLater(plugin, () -> player.kickPlayer(uuidSpoofKickMessage), 1L);
						}
					}

					exploitPlayer.setLogged(true);
				});
			} else
				exploitPlayer.setLogged(true);
		}

			if (player.hasPermission("exploitfixer.notifications")) {
				notificationsModule.setNotifications(player, true);
			}
	}
}
