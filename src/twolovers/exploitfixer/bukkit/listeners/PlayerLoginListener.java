package twolovers.exploitfixer.bukkit.listeners;

import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerLoginEvent;
import org.bukkit.plugin.Plugin;
import org.bukkit.scheduler.BukkitScheduler;

import hamsterapi.adapters.HamsterPlayer;
import twolovers.exploitfixer.bukkit.utils.VersionUtil;
import twolovers.exploitfixer.bukkit.instanceables.ExploitPlayer;
import twolovers.exploitfixer.bukkit.managers.ExploitPlayerManager;
import twolovers.exploitfixer.bukkit.managers.ModuleManager;
import twolovers.exploitfixer.bukkit.modules.ConnectionModule;
import twolovers.exploitfixer.bukkit.modules.MessagesModule;
import twolovers.exploitfixer.bukkit.modules.NotificationsModule;

import java.net.InetAddress;
import java.util.UUID;

public class PlayerLoginListener implements Listener {
	private final Plugin plugin;
	private final NotificationsModule notificationsModule;
	private final MessagesModule messagesModule;
	private final ConnectionModule connectionModule;
	private final ExploitPlayerManager exploitPlayerManager;

	public PlayerLoginListener(final Plugin plugin, final ModuleManager moduleManager) {
		this.plugin = plugin;
		this.connectionModule = moduleManager.getConnectionModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
		this.messagesModule = moduleManager.getMessagesModule();
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
	}

	@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
	public void onPlayerLogin(final PlayerLoginEvent event) {
		final Player player = event.getPlayer();
		final InetAddress address = event.getAddress();
		final String locale;

		if (VersionUtil.isOneDotFifteen()) {
			locale = player.getLocale().substring(0, 2);
		} else {
			locale = player.spigot().getLocale().substring(0, 2);
		}

		if (connectionModule.isNullAddressEnabled() && address == null) {
			final String nullAddressKickMessage = messagesModule.getKickMessage("nulladdress", locale);

			event.setKickMessage(nullAddressKickMessage);
			event.setResult(PlayerLoginEvent.Result.KICK_OTHER);
			new HamsterPlayer(player).kickPlayer(nullAddressKickMessage);
		} else {
			final UUID uuid = player.getUniqueId();
			final String playerName = player.getName();
			final ExploitPlayer exploitPlayer = exploitPlayerManager.get(uuid, player);

			if (connectionModule.isUUIDSpoofEnabled()) {
				final BukkitScheduler scheduler = plugin.getServer().getScheduler();

				scheduler.runTaskAsynchronously(plugin, () -> {
					final String originalUUID = uuid.toString().replace("-", "");
					final String offlineUUID = UUID.nameUUIDFromBytes(("OfflinePlayer:" + playerName).getBytes())
							.toString().replace("-", "");

					if (!originalUUID.contains(offlineUUID)) {
						final String onlineUUID = exploitPlayer.getOnlineUUID();

						if (onlineUUID == null || !onlineUUID.contains(originalUUID)) {
							final String uuidSpoofKickMessage = messagesModule.getKickMessage("uuidspoof", locale);

							event.setKickMessage(uuidSpoofKickMessage);
							event.setResult(PlayerLoginEvent.Result.KICK_OTHER);
							new HamsterPlayer(player).kickPlayer(uuidSpoofKickMessage);
						}
					}

					exploitPlayer.setLogged(true);
					exploitPlayer.updateTeleportTimeMillis();
				});
			} else {
				exploitPlayer.setLogged(true);
				exploitPlayer.updateTeleportTimeMillis();
			}
		}

		if (player.hasPermission("exploitfixer.notifications")) {
			notificationsModule.setNotifications(player, true);
		}
	}
}
