package twolovers.exploitfixer.bukkit.managers;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import twolovers.exploitfixer.bukkit.instanceables.BukkitExploitPlayer;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;

public class BukkitExploitPlayerManager implements ExploitPlayerManager {
	final private ModuleManager moduleManager;
	final private Map<String, ExploitPlayer> exploitPlayers = new HashMap<>();
	private int punishments = 0;

	BukkitExploitPlayerManager(final ModuleManager moduleManager) {
		this.moduleManager = moduleManager;

		reload();
	}

	@Override
	public ExploitPlayer get(final String playerName) {
		return exploitPlayers.getOrDefault(playerName, null);
	}

	@Override
	public void add(final String playerName) {
		if (!exploitPlayers.containsKey(playerName))
			exploitPlayers.put(playerName, new BukkitExploitPlayer(playerName, moduleManager));
	}

	@Override
	public void clear() {
		boolean cleared = false;

		for (final String name : exploitPlayers.keySet().toArray(new String[0]))
			if (Bukkit.getPlayerExact(name) == null) {
				exploitPlayers.remove(name);
				cleared = true;
			}

		if (cleared)
			Bukkit.getLogger().log(Level.INFO, "[ExploitFixer] Cleared unused cached players!");
	}

	@Override
	public void reload() {
		exploitPlayers.clear();

		for (final Player player : Bukkit.getOnlinePlayers())
			add(player.getName());
	}

	@Override
	public int getSize() {
		return exploitPlayers.size();
	}

	@Override
	public int getPunishments() {
		return punishments;
	}

	@Override
	public int addPunishment() {
		return ++punishments;
	}
}
