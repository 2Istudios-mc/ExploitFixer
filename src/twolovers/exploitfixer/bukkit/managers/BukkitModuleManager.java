package twolovers.exploitfixer.bukkit.managers;

import org.bukkit.Server;
import org.bukkit.configuration.Configuration;
import org.bukkit.plugin.Plugin;
import twolovers.exploitfixer.bukkit.modules.*;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.*;

import java.util.logging.Level;

public class BukkitModuleManager implements ModuleManager {
	private Plugin plugin;
	private CommandsModule commandsModule;
	private CustomPayloadModule customPayloadModule;
	private ItemsFixModule itemsFixModule;
	private MessagesModule messagesModule;
	private NotificationsModule notificationsModule;
	private PacketsModule packetsModule;
	private ExploitPlayerManager exploitPlayerManager;
	private SignsModule signsModule;
	private ReloadableModule uuidSpoofModule, nullAddressModule;

	public BukkitModuleManager(final Plugin plugin, final Configuration configYml, final Configuration messagesYml) {
		this.plugin = plugin;
		this.commandsModule = new BukkitCommandsModule(configYml);
		this.customPayloadModule = new BukkitCustomPayloadModule(plugin, this, configYml);
		this.itemsFixModule = new BukkitItemsFixModule(configYml);
		this.messagesModule = new BukkitMessagesModule(plugin.getDescription().getVersion(), messagesYml);
		this.notificationsModule = new BukkitNotificationsModule(configYml);
		this.uuidSpoofModule = new BukkitUUIDSpoofModule(configYml);
		this.packetsModule = new BukkitPacketsModule(plugin, this, configYml);
		this.exploitPlayerManager = new BukkitExploitPlayerManager(plugin.getServer(), this);
		this.signsModule = new BukkitSignsModule(configYml);
		this.nullAddressModule = new BukkitNullAddressModule(configYml);
	}

	@Override
	public void reload(final Object configYml, final Object messagesYml, final Object spigotYml) {
		try {
			this.commandsModule.reload(configYml);
			this.customPayloadModule.reload(configYml);
			this.itemsFixModule.reload(configYml);
			this.messagesModule.reload(messagesYml);
			this.notificationsModule.reload(configYml);
			this.uuidSpoofModule.reload(configYml);
			this.packetsModule.reload(configYml);
			this.exploitPlayerManager.reload();
			this.signsModule.reload(configYml);
			this.nullAddressModule.reload(configYml);
		} catch (final NullPointerException e) {
			final Server server = plugin.getServer();

			server.getLogger().log(Level.SEVERE, "Your ExploitFixer configuration is wrong, please reset it or the plugin wont work!");
			server.getPluginManager().disablePlugin(plugin);
		}
	}

	@Override
	public CommandsModule getCommandsModule() {
		return commandsModule;
	}

	@Override
	public CustomPayloadModule getCustomPayloadModule() {
		return customPayloadModule;
	}

	@Override
	public ItemsFixModule getItemsFixModule() {
		return itemsFixModule;
	}

	@Override
	public MessagesModule getMessagesModule() {
		return messagesModule;
	}

	@Override
	public NotificationsModule getNotificationsModule() {
		return notificationsModule;
	}

	@Override
	public ExploitPlayerManager getExploitPlayerManager() {
		return exploitPlayerManager;
	}

	@Override
	public ReloadableModule getUUIDSpoofModule() {
		return uuidSpoofModule;
	}

	@Override
	public PacketsModule getPacketsModule() {
		return packetsModule;
	}

	@Override
	public ReloadableModule getNullAddressModule() {
		return nullAddressModule;
	}

	@Override
	public SignsModule getSignsModule() {
		return signsModule;
	}
}
