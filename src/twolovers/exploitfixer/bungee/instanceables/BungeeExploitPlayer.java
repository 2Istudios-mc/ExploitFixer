package twolovers.exploitfixer.bungee.instanceables;

import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.plugin.Plugin;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.*;
import twolovers.exploitfixer.shared.enums.Identity;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.List;

public class BungeeExploitPlayer implements ExploitPlayer {
	final private ExploitPlayerManager exploitPlayerManager;
	final private MessagesModule messagesModule;
	final private NotificationsModule notificationsModule;
	final private HashMap<Identity, Integer> violations = new HashMap<>();
	final private String name;
	private String onlineUUID = null;
	private int channels = 0;
	private double lastViolation = 0;

	public BungeeExploitPlayer(final String name, final ModuleManager moduleManager) {
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
		this.messagesModule = moduleManager.getMessagesModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
		this.name = name;
	}

	public int getChannels() {
		return channels;
	}

	public void clearChannels() {
		this.channels = 0;
	}

	public void addChannels(final int channels) {
		this.channels += channels;
	}

	public int getViolations(final Identity identifier) {
		return violations.getOrDefault(identifier, 0);
	}

	public void addViolation(final Identity identifier) {
		final double currentTime = System.currentTimeMillis();

		if (currentTime - lastViolation >= 1000) {
			lastViolation = currentTime;
			violations.clear();
		}

		this.violations.put(identifier, violations.getOrDefault(identifier, 0) + 1);
	}

	public String getOnlineUUID() {
		if (onlineUUID == null) {
			try {
				final URLConnection connection = new URL("https://api.mojang.com/users/profiles/minecraft/" + name).openConnection();

				connection.setDoOutput(true);
				connection.connect();

				final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
				final StringBuilder response = new StringBuilder();

				String inputLine;

				while ((inputLine = bufferedReader.readLine()) != null)
					response.append(inputLine).append("\n");

				bufferedReader.close();
				onlineUUID = response.toString();
			} catch (Exception ignored) {
			}
		}

		return onlineUUID;
	}

	public void punish(final Object plugin1, final Module module, final Object player) {
		final List<String> punishCommands = module.getPunishCommands();
		final ProxiedPlayer player1 = (ProxiedPlayer) player;
		final String lang = player1.getLocale().toString().substring(0, 2);

		if (player1.isConnected()) {
			exploitPlayerManager.addPunishment();

			if (punishCommands != null) {
				final Plugin plugin = (Plugin) plugin1;
				final ProxyServer proxyServer = plugin.getProxy();

				for (final String punishCommand : punishCommands)
					if (!punishCommand.equals(""))
						proxyServer.getPluginManager().dispatchCommand(proxyServer.getConsole(), punishCommand.replace("%player%", player1.getName()));
			}

			notificationsModule.sendNotification(module.getName(), player);

			if ((module instanceof CommandsModule && ((CommandsModule) module).isKick()) || (module instanceof CustomPayloadModule && ((CustomPayloadModule) module).isKick())) {
				final String kickMessage = messagesModule.getKickMessage(module, lang);
				player1.disconnect(new TextComponent(kickMessage));
			}
		}
	}

	public String getName() {
		return name;
	}

	public void clearViolations() {
		violations.clear();
	}
}
