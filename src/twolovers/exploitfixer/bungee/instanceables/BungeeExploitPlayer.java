package twolovers.exploitfixer.bungee.instanceables;

import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.plugin.Cancellable;
import net.md_5.bungee.api.plugin.Plugin;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.instanceables.Thresholds;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.CancellableModule;
import twolovers.exploitfixer.interfaces.modules.MessagesModule;
import twolovers.exploitfixer.interfaces.modules.Module;
import twolovers.exploitfixer.interfaces.modules.NotificationsModule;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.Collection;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class BungeeExploitPlayer implements ExploitPlayer {
	final private ExploitPlayerManager exploitPlayerManager;
	final private MessagesModule messagesModule;
	final private NotificationsModule notificationsModule;
	final private Map<CancellableModule, Double> violations = new HashMap<>();
	final private String name;
	private String onlineUUID = null;
	private int channels = 0;
	private double lastViolation = 0;

	public BungeeExploitPlayer(final String name, final ModuleManager moduleManager) {
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
		this.messagesModule = moduleManager.getMessagesModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
		this.name = name;
	}

	@Override
	public int getChannels() {
		return channels;
	}

	@Override
	public void clearChannels() {
		this.channels = 0;
	}

	@Override
	public int addChannels(final int channels) {
		return this.channels += channels;
	}

	@Override
	public double getViolations(final Module module) {
		return violations.getOrDefault(module, 0D);
	}

	@Override
	public String getOnlineUUID() {
		if (onlineUUID == null) {
			try {
				final URLConnection connection = new URL("https://api.mojang.com/users/profiles/minecraft/" + name).openConnection();

				connection.setDoOutput(true);
				connection.connect();

				final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
				final StringBuilder response = new StringBuilder();

				String inputLine;

				while ((inputLine = bufferedReader.readLine()) != null)
					response.append(inputLine).append("\n");

				bufferedReader.close();
				onlineUUID = response.toString();
			} catch (Exception ignored) {
			}
		}

		return onlineUUID;
	}

	@Override
	public void addVls(final Object pluginObject, final Object event, final Object playerObject, final CancellableModule module, final double amount) {
		if (playerObject instanceof ProxiedPlayer) {
			final Thresholds thresholds = module.getThresholds();

			if (thresholds != null) {
				final ProxiedPlayer player = (ProxiedPlayer) playerObject;

				if (player.isConnected()) {
					final Plugin plugin = (Plugin) pluginObject;
					final ProxyServer server = plugin.getProxy();
					final double currentTime = System.currentTimeMillis();
					final Locale locale = player.getLocale();
					String lang = null;

					if (currentTime - lastViolation >= 1000) {
						lastViolation = currentTime;

						for (final CancellableModule violationModule : violations.keySet().toArray(new CancellableModule[0])) {
							final double vls = violations.get(violationModule) - violationModule.getReduceVls();

							if (vls <= 0)
								violations.remove(violationModule);
							else
								violations.put(violationModule, vls);
						}
					}

					final double oldVls = getViolations(module);
					final double newVls = oldVls + amount;

					if (locale != null)
						lang = locale.toString().substring(0, 2);

					final String kickMessage = messagesModule.getKickMessage(module, lang);

					violations.put(module, newVls);

					for (final int threshold : thresholds.getThresholds())
						if (threshold > oldVls && threshold <= newVls) {
							final Collection<String> commands = thresholds.getCommands(threshold);

							if (commands != null && !commands.isEmpty())
								for (final String punishCommand : commands)
									if (!punishCommand.isEmpty())
										if (punishCommand.equals("kick")) {
											player.disconnect(kickMessage);
											exploitPlayerManager.addPunishment();
										} else if (punishCommand.equals("notification"))
											notificationsModule.sendNotification(module.getName(), player);
										else
											server.getPluginManager().dispatchCommand(server.getConsole(), punishCommand.replace("%player%", player.getName()));
						}

					if (event instanceof Cancellable && module.getCancelVls() <= newVls)
						((Cancellable) event).setCancelled(true);
				}
			}
		}
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public void clearViolations() {
		violations.clear();
	}
}
