package twolovers.exploitfixer.bungee.listeners;

import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.event.PostLoginEvent;
import net.md_5.bungee.api.plugin.Listener;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.api.scheduler.TaskScheduler;
import net.md_5.bungee.event.EventHandler;
import net.md_5.bungee.event.EventPriority;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.MessagesModule;
import twolovers.exploitfixer.interfaces.modules.Module;
import twolovers.exploitfixer.interfaces.modules.NotificationsModule;

import java.net.InetSocketAddress;
import java.util.Locale;
import java.util.UUID;

public class PostLoginListener implements Listener {
	private final Plugin plugin;
	private final NotificationsModule notificationsModule;
	private final MessagesModule messagesModule;
	private final Module uuidSpoofModule, nullAddressModule;
	private final ExploitPlayerManager exploitPlayerManager;

	public PostLoginListener(final Plugin plugin, final ModuleManager moduleManager) {
		this.plugin = plugin;
		this.notificationsModule = moduleManager.getNotificationsModule();
		this.messagesModule = moduleManager.getMessagesModule();
		this.uuidSpoofModule = moduleManager.getUUIDSpoofModule();
		this.nullAddressModule = moduleManager.getNullAddressModule();
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
	}

	@EventHandler(priority = EventPriority.LOWEST)
	public void onPostLogin(final PostLoginEvent event) {
		final ProxiedPlayer proxiedPlayer = event.getPlayer();
		final InetSocketAddress address = proxiedPlayer.getAddress();
		final Locale playerLocale = proxiedPlayer.getLocale();
		final String locale;

		if (playerLocale != null)
			locale = playerLocale.toLanguageTag().substring(0, 2);
		else
			locale = "en";

		if (nullAddressModule.isEnabled() && (address == null || address.isUnresolved())) {
			proxiedPlayer.disconnect(new TextComponent(messagesModule.getKickMessage(nullAddressModule, locale)));
		} else {
			final UUID uuid = proxiedPlayer.getUniqueId();
			final ExploitPlayer exploitPlayer = exploitPlayerManager.get(uuid, proxiedPlayer);

			if (uuidSpoofModule.isEnabled()) {
				final TaskScheduler scheduler = plugin.getProxy().getScheduler();
				final String playerName = proxiedPlayer.getName();

				scheduler.runAsync(plugin, () -> {
					final String originalUUID = uuid.toString().replace("-", "");
					final String offlineUUID = UUID.nameUUIDFromBytes(("OfflinePlayer:" + playerName).getBytes()).toString().replace("-", "");

					if (!originalUUID.contains(offlineUUID)) {
						final String onlineUUID = exploitPlayer.getOnlineUUID();

						if (onlineUUID == null || !onlineUUID.contains(originalUUID)) {
							final String uuidSpoofKickMessage = messagesModule.getKickMessage(uuidSpoofModule, locale);

							proxiedPlayer.disconnect(new TextComponent(uuidSpoofKickMessage));
						}
					}

					exploitPlayer.setLogged(true);
				});
			} else
				exploitPlayer.setLogged(true);
		}
	}
}