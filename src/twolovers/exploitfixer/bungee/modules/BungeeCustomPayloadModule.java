package twolovers.exploitfixer.bungee.modules;

import com.google.common.base.Charsets;
import net.md_5.bungee.api.connection.Connection;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.event.PluginMessageEvent;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.config.Configuration;
import twolovers.exploitfixer.bungee.instanceables.BungeeViolations;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.instanceables.Violations;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;
import twolovers.exploitfixer.interfaces.modules.CustomPayloadModule;

import java.util.HashMap;
import java.util.Map;

public class BungeeCustomPayloadModule implements CustomPayloadModule {
	private Map<String, Double> multipliers = new HashMap<>();
	private Plugin plugin;
	private ModuleManager moduleManager;
	private Violations violations;
	private double cancelVls, reduceVls;
	private int maxChannels;
	private boolean enabled;

	public BungeeCustomPayloadModule(final Plugin plugin, final ModuleManager moduleManager, final Object configYml) {
		this.plugin = plugin;
		this.moduleManager = moduleManager;

		reload(configYml);
	}

	@Override
	public double getCancelVls() {
		return cancelVls;
	}

	@Override
	public double getReduceVls() {
		return reduceVls;
	}

	@Override
	public Violations getViolations() {
		return violations;
	}

	@Override
	public String getName() {
		return "CustomPayload";
	}

	@Override
	final public boolean isEnabled() {
		return enabled;
	}

	@Override
	public void reload(final Object configYml) {
		final Configuration configYml1 = (Configuration) configYml;
		final Configuration configurationSection = configYml1.getSection("custompayload.multipliers");
		final String name = getName().toLowerCase();

		this.enabled = configYml1.getBoolean("custompayload.enabled");
		this.cancelVls = configYml1.getDouble("custompayload.cancel_vls");
		this.reduceVls = configYml1.getDouble(name + ".reduce_vls");
		this.violations = new BungeeViolations(configYml1.getSection("custompayload.violations"));
		this.maxChannels = configYml1.getInt("custompayload.max_channels");

		for (final String key : configurationSection.getKeys())
			multipliers.put(key, configurationSection.getDouble(key));
	}

	@Override
	public void checkPacket(final Object event) {
		if (event instanceof PluginMessageEvent) {
			final PluginMessageEvent pluginMessageEvent = (PluginMessageEvent) event;
			final Connection sender = pluginMessageEvent.getSender();

			if (sender instanceof ProxiedPlayer && sender.isConnected()) {
				final ExploitPlayer exploitPlayer = moduleManager.getExploitPlayerManager().get(((ProxiedPlayer) sender).getName());
				final String content = new String(pluginMessageEvent.getData(), Charsets.UTF_8);
				final String tag = pluginMessageEvent.getTag();

				if (tag != null && tag.equals("REGISTER")) {
					int channels = content.split("[\u0001-\u0009]").length;

					if (exploitPlayer.addChannels(channels) > maxChannels)
						exploitPlayer.addVls(plugin, event, sender, this, multipliers.getOrDefault("MAX_CHANNELS", 9999D));
				} else {
					if (exploitPlayer != null)
						exploitPlayer.addVls(plugin, event, sender, this, multipliers.getOrDefault(tag, multipliers.getOrDefault("OTHER", 1D)));
				}
			}
		}
	}
}
