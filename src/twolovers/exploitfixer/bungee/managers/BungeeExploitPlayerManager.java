package twolovers.exploitfixer.bungee.managers;

import net.md_5.bungee.BungeeCord;
import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import twolovers.exploitfixer.bungee.instanceables.BungeeExploitPlayer;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;

public class BungeeExploitPlayerManager implements ExploitPlayerManager {
	private final ModuleManager moduleManager;
	private final ProxyServer proxy;
	private final Map<String, ExploitPlayer> exploitPlayers = new HashMap<>();
	private int punishments = 0;

	BungeeExploitPlayerManager(final ProxyServer proxy, final ModuleManager moduleManager) {
		this.moduleManager = moduleManager;
		this.proxy = proxy;

		reload();
	}

	@Override
	public ExploitPlayer get(final String name) {
		return exploitPlayers.getOrDefault(name, null);
	}

	@Override
	public int getSize() {
		return exploitPlayers.size();
	}

	@Override
	public int getPunishments() {
		return punishments;
	}

	@Override
	public void add(final String name) {
		if (!exploitPlayers.containsKey(name))
			exploitPlayers.put(name, new BungeeExploitPlayer(name, moduleManager));
	}

	@Override
	public int addPunishment() {
		return ++punishments;
	}

	@Override
	public void reload() {
		exploitPlayers.clear();

		for (final ProxiedPlayer player : BungeeCord.getInstance().getPlayers())
			add(player.getName());
	}

	@Override
	public void clear() {
		boolean cleared = false;

		for (final String name : exploitPlayers.keySet().toArray(new String[0]))
			if (proxy.getPlayer(name) == null) {
				exploitPlayers.remove(name);
				cleared = true;
			}

		if (cleared)
			proxy.getLogger().log(Level.INFO, "[ExploitFixer] Cleared unused cached players!");
	}
}
