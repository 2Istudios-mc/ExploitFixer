package twolovers.exploitfixer.bungee.managers;

import net.md_5.bungee.BungeeCord;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import twolovers.exploitfixer.bungee.instanceables.BungeeExploitPlayer;
import twolovers.exploitfixer.interfaces.instanceables.ExploitPlayer;
import twolovers.exploitfixer.interfaces.managers.ExploitPlayerManager;
import twolovers.exploitfixer.interfaces.managers.ModuleManager;

import java.util.Collection;
import java.util.HashSet;

public class BungeeExploitPlayerManager implements ExploitPlayerManager {
	final private ModuleManager moduleManager;
	final private HashSet<ExploitPlayer> exploitPlayers = new HashSet<>();
	private int punishments = 0;

	public BungeeExploitPlayerManager(final ModuleManager moduleManager) {
		this.moduleManager = moduleManager;
	}

	public ExploitPlayer getPlayer(final String playerName) {
		for (final ExploitPlayer exploitPlayer : new HashSet<>(exploitPlayers))
			if (exploitPlayer.getName().equals(playerName))
				return exploitPlayer;

		return null;
	}

	public void addPlayer(final String playerName) {
		if (getPlayer(playerName) == null)
			exploitPlayers.add(new BungeeExploitPlayer(playerName, moduleManager));
	}

	public void reload() {
		exploitPlayers.clear();
		punishments = 0;

		for (final ProxiedPlayer proxiedPlayer : BungeeCord.getInstance().getPlayers())
			exploitPlayers.add(new BungeeExploitPlayer(proxiedPlayer.getName(), moduleManager));
	}

	public Collection<ExploitPlayer> getExploitPlayers() {
		return exploitPlayers;
	}

	@Override
	public int getPunishments() {
		return punishments;
	}

	@Override
	public void addPunishment() {
		punishments++;
	}
}
