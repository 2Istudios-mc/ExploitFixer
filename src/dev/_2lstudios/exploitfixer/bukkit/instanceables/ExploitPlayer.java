package dev._2lstudios.exploitfixer.bukkit.instanceables;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import org.bukkit.Server;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.plugin.Plugin;
import org.bukkit.scheduler.BukkitScheduler;

import dev._2lstudios.exploitfixer.bukkit.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.bukkit.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bukkit.modules.MessagesModule;
import dev._2lstudios.exploitfixer.bukkit.modules.NotificationsModule;
import dev._2lstudios.exploitfixer.bukkit.utils.VersionUtil;
import dev._2lstudios.exploitfixer.shared.interfaces.Module;
import dev._2lstudios.exploitfixer.shared.interfaces.ViolationModule;
import dev._2lstudios.hamsterapi.enums.PacketType;
import dev._2lstudios.hamsterapi.hamsterplayer.HamsterPlayer;
import dev._2lstudios.hamsterapi.wrappers.PacketWrapper;

public class ExploitPlayer {
	private final Plugin plugin;
	private final ExploitPlayerManager exploitPlayerManager;
	private final MessagesModule messagesModule;
	private final NotificationsModule notificationsModule;
	private final Map<ViolationModule, Double> violations;
	private final Collection<Collection<String>> punishments;
	private final String name;
	private String onlineUUID;
	private double lastViolation;
	private int channels;
	private boolean logged;

	public ExploitPlayer(final Plugin plugin, final String name, final ModuleManager moduleManager) {
		this.plugin = plugin;
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
		this.messagesModule = moduleManager.getMessagesModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
		this.violations = new HashMap<>();
		this.punishments = new HashSet<>();
		this.name = name;
		this.onlineUUID = null;
		this.lastViolation = 0;
		this.channels = 0;
		this.logged = false;
	}

	public int getChannels() {
		return channels;
	}

	public int addChannels(final int channels) {
		return this.channels += channels;
	}

	public double getViolations(final ViolationModule module) {
		return this.violations.getOrDefault(module, 0D);
	}

	public String getOnlineUUID() {
		if (onlineUUID == null) {
			try {
				final URLConnection connection = new URL("https://api.mojang.com/users/profiles/minecraft/" + name)
						.openConnection();

				connection.setDoOutput(true);
				connection.connect();

				final BufferedReader bufferedReader = new BufferedReader(
						new InputStreamReader(connection.getInputStream()));
				final StringBuilder response = new StringBuilder();

				String inputLine;

				while ((inputLine = bufferedReader.readLine()) != null)
					response.append(inputLine).append("\n");

				bufferedReader.close();
				onlineUUID = response.toString();
			} catch (final Exception ignored) {
			}
		}

		return onlineUUID;
	}

	public void addVls(final Plugin plugin, final Cancellable event, final HamsterPlayer hamsterPlayer,
			final ViolationModule module, final double amount) {
		addVls(plugin, event, null, hamsterPlayer, module, amount);
	}

	public void addVls(final Plugin plugin, final Cancellable event, final PacketWrapper packet,
			final HamsterPlayer hamsterPlayer, final ViolationModule module, final double amount) {
		final Violations violations = (Violations) module.getViolations();

		if (violations != null) {
			final double currentTime = System.currentTimeMillis();

			if (currentTime - lastViolation >= 1000) {
				lastViolation = currentTime;

				for (final ViolationModule violationModule : new HashSet<>(this.violations.keySet())) {
					final double vls = this.violations.get(violationModule) - violationModule.getReduceVls();

					if (vls <= 0) {
						this.violations.remove(violationModule);
					} else {
						this.violations.put(violationModule, vls);
					}
				}
			}

			final double newVls = getViolations(module) + amount;

			this.violations.put(module, newVls);

			if (event instanceof Cancellable && module.getCancelVls() <= newVls) {
				((Cancellable) event).setCancelled(true);
			}

			for (final int threshold : violations.getViolations()) {
				if (threshold <= newVls) {
					final Collection<String> commands = violations.getCommands(threshold);

					punish(module, hamsterPlayer, packet, commands, (int) newVls);
				}
			}
		}
	}

	public void punish(final Module module, final HamsterPlayer hamsterPlayer, final PacketWrapper packet,
			final Collection<String> punishments, final int newVls) {
		if (!punishments.isEmpty() && !this.punishments.contains(punishments)) {
			final Server server = plugin.getServer();
			final CommandSender consoleSender = server.getConsoleSender();
			final BukkitScheduler scheduler = server.getScheduler();
			final Player player = hamsterPlayer.getPlayer();
			final String playerName = player.getName();

			for (final String punishment : punishments) {
				if (punishment.equals("kick")) {
					final String locale = VersionUtil.getLocale(player);
					final String kickMessage = messagesModule.getKickMessage(module, locale);

					hamsterPlayer.disconnect(kickMessage);
					hamsterPlayer.closeChannel();
				} else if (punishment.equals("notification")) {
					final String moduleName = module.getName();

					if (packet != null) {
						final PacketType packetType = packet.getType();

						if (packetType != null) {
							notificationsModule.sendNotification(packetType.toString(), player, (int) newVls);
						} else {
							notificationsModule.sendNotification(moduleName, player, (int) newVls);
						}
					} else {
						notificationsModule.sendNotification(moduleName, player, (int) newVls);
					}
				} else {
					if (server.isPrimaryThread()) {
						server.dispatchCommand(consoleSender, punishment.replace("%player%", playerName));
					} else {
						scheduler.runTask(plugin, () -> {
							server.dispatchCommand(consoleSender, punishment.replace("%player%", playerName));
						});
					}
				}
			}

			this.punishments.add(punishments);
			this.exploitPlayerManager.addPunishment();
		}
	}

	public void clear() {
		this.violations.clear();
		this.punishments.clear();
		this.lastViolation = 0;
		this.channels = 0;
	}

	public void setLogged(final boolean logged) {
		this.logged = logged;
	}

	public boolean isLogged() {
		return logged;
	}
}
