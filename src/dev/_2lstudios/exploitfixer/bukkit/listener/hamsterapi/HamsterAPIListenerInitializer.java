package dev._2lstudios.exploitfixer.bukkit.listener.hamsterapi;

import org.bukkit.plugin.Plugin;

import dev._2lstudios.exploitfixer.bukkit.managers.ModuleManager;
import dev._2lstudios.hamsterapi.HamsterAPI;
import dev._2lstudios.hamsterapi.handlers.PostProcessEventHandler;
import dev._2lstudios.hamsterapi.handlers.PreProcessEventHandler;

public class HamsterAPIListenerInitializer {
    private final HamsterAPI hamsterAPI;
    private final Plugin plugin;
    private final ModuleManager moduleManager;
    private ExploitFixerPreProcessListener exploitFixerPreProcessListener;
    private ExploitFixerPostProcessListener exploitFixerPostProcessListener;
    private boolean registered = false;

    public HamsterAPIListenerInitializer(final Plugin plugin, final ModuleManager moduleManager) {
        this.hamsterAPI = HamsterAPI.getInstance();
        this.plugin = plugin;
        this.moduleManager = moduleManager;
    }

    public void register() {
        this.registered = true;

        final PreProcessEventHandler preProcessEventHandler = hamsterAPI.getPreProcessEventHandler();
        final PostProcessEventHandler postProcessEventHandler = hamsterAPI.getPostProcessEventHandler();

        preProcessEventHandler.addListener(
                this.exploitFixerPreProcessListener = new ExploitFixerPreProcessListener(plugin, moduleManager), 0);
        postProcessEventHandler.addListener(
                this.exploitFixerPostProcessListener = new ExploitFixerPostProcessListener(plugin, moduleManager), 0);
    }

    public void unregister() {
        this.registered = false;

        final PreProcessEventHandler preProcessEventHandler = hamsterAPI.getPreProcessEventHandler();
        final PostProcessEventHandler postProcessEventHandler = hamsterAPI.getPostProcessEventHandler();

        preProcessEventHandler.removeListener(exploitFixerPreProcessListener);
        postProcessEventHandler.removeListener(exploitFixerPostProcessListener);
    }

    public boolean isRegistered() {
        return this.registered;
    }
}
