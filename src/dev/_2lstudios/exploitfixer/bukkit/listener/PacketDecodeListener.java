package dev._2lstudios.exploitfixer.bukkit.listener;

import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.plugin.Plugin;

import dev._2lstudios.exploitfixer.bukkit.instanceables.ExploitPlayer;
import dev._2lstudios.exploitfixer.bukkit.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.bukkit.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bukkit.modules.CustomPayloadModule;
import dev._2lstudios.exploitfixer.bukkit.modules.NotificationsModule;
import dev._2lstudios.exploitfixer.bukkit.modules.PacketsModule;
import dev._2lstudios.hamsterapi.HamsterAPI;
import dev._2lstudios.hamsterapi.events.PacketDecodeEvent;
import dev._2lstudios.hamsterapi.hamsterplayer.HamsterPlayer;
import io.netty.buffer.ByteBuf;

public class PacketDecodeListener implements Listener {
    private final Plugin plugin;
    private final CustomPayloadModule customPayloadModule;
    private final ExploitPlayerManager exploitPlayerManager;
    private final NotificationsModule notificationsModule;
    private final PacketsModule packetsModule;

    PacketDecodeListener(final Plugin plugin, final ModuleManager moduleManager) {
        HamsterAPI.getInstance().getBufferIO();
        this.plugin = plugin;
        this.customPayloadModule = moduleManager.getCustomPayloadModule();
        this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
        this.notificationsModule = moduleManager.getNotificationsModule();
        this.packetsModule = moduleManager.getPacketsModule();
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.LOWEST)
    public void onPacketReceive(final PacketDecodeEvent event) {
        final HamsterPlayer hamsterPlayer = event.getHamsterPlayer();
        final Player player = hamsterPlayer.getPlayer();

        if (player != null && player.isOnline()) {
            final int dataBytes = packetsModule.getDataBytes();
            final ByteBuf byteBuf = event.getByteBuf().get();
            final int refCnt = byteBuf.refCnt();

            if (refCnt < 1) {
                final double dataVls = packetsModule.getDataVls();
                final String playerName = player.getName(), reason = "[Decoder|Data] " + playerName
                        + " sent a packet with invalid refCnt! refCnt: " + refCnt + " Vls: " + dataVls;

                cancelExploit(event, hamsterPlayer, reason, dataVls);
            } else if (byteBuf.capacity() > dataBytes) {
                final double dataVls = packetsModule.getDataVls();
                final String playerName = player.getName(), reason = "[Decoder|Data] " + playerName
                        + " sent a packet that exceeds size limit! Max: " + dataBytes + " Vls: " + dataVls;

                cancelExploit(event, hamsterPlayer, reason, dataVls);
            }
        } else if (packetsModule.isOffline()) {
            if (player == null) {
                notificationsModule.debug("[Decoder|Offline] unknown sent a packet while offline!");
            } else {
                notificationsModule.debug("[Decoder|Offline] " + player.getName() + " sent a packet while offline!");
            }

            event.setCancelled(true);
            hamsterPlayer.closeChannel();

            return;
        }
    }

    private void cancelExploit(final PacketDecodeEvent event, final HamsterPlayer hamsterPlayer, final String reason,
            final double vls) {
        final Player player = hamsterPlayer.getPlayer();
        final ExploitPlayer exploitPlayer = exploitPlayerManager.get(player);

        notificationsModule.debug(reason);

        event.setCancelled(true);
        exploitPlayer.addVls(plugin, event, hamsterPlayer, customPayloadModule, vls);
    }
}