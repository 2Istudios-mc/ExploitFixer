package dev._2lstudios.exploitfixer.bukkit.utils;

import java.nio.charset.StandardCharsets;
import java.util.Collection;

import org.bukkit.Material;
import org.bukkit.block.BlockState;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;

import dev._2lstudios.exploitfixer.bukkit.exploit.BukkitExploitPlayer;
import dev._2lstudios.exploitfixer.bukkit.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.bukkit.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bukkit.modules.ItemsFixModule;
import dev._2lstudios.exploitfixer.shared.modules.NotificationsModule;
import dev._2lstudios.exploitfixer.shared.modules.PacketsModule;
import dev._2lstudios.hamsterapi.hamsterplayer.HamsterPlayer;

public class ExploitUtil {
    private final ExploitPlayerManager exploitPlayerManager;
    private final ItemsFixModule itemsFixModule;
    private final NotificationsModule notificationsModule;
    private final PacketsModule packetsModule;

    public ExploitUtil(final ModuleManager moduleManager) {
        this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
        this.itemsFixModule = moduleManager.getItemsFixModule();
        this.notificationsModule = moduleManager.getNotificationsModule();
        this.packetsModule = moduleManager.getPacketsModule();
    }

    private boolean checkBlockState(final BlockStateMeta meta) {
        if (meta.hasBlockState()) {
            final BlockState blockState = meta.getBlockState();

            if (blockState instanceof InventoryHolder) {
                final InventoryHolder inventoryHolder = (InventoryHolder) blockState;

                for (final ItemStack item1 : inventoryHolder.getInventory().getContents()) {
                    return checkItem(item1);
                }
            }
        }

        return true;
    }

    private boolean checkBook(final BookMeta meta) {
        if (meta.getTitle().length() > 32) {
            return false;
        }

        if (meta.getAuthor().length() > 16) {
            return false;
        }

        if (meta.getPageCount() > 50) {
            return false;
        }

        final int dataBytesBook = packetsModule.getDataBytesBook();

        for (final String page : meta.getPages()) {
            final int pageBytes = page.getBytes(StandardCharsets.UTF_8).length;

            if (pageBytes > dataBytesBook) {
                return false;
            }
        }

        return true;
    }

    public boolean checkItem(final ItemStack item) {
        final ItemMeta itemMeta = item.getItemMeta();

        if (itemMeta.getDisplayName().length() > 64) {
            return false;
        }

        if (itemMeta.getLore().size() > 32) {
            return false;
        }

        if (itemMeta instanceof BookMeta) {
            return checkBook((BookMeta) itemMeta);
        } else if (itemMeta instanceof BlockStateMeta) {
            return checkBlockState((BlockStateMeta) itemMeta);
        }

        return true;
    }

    public boolean checkSign(final String[] linesString) {
        final int dataBytesSign = packetsModule.getDataBytesSign();

        if (linesString != null && dataBytesSign > 0) {
            if (linesString.length > 4) {
                return true;
            } else {
                for (final String line : linesString) {
                    if (line.getBytes(StandardCharsets.UTF_8).length > dataBytesSign) {
                        return false;
                    }
                }
            }
        }

        return true;
    }

    public String clearIfBlacklisted(final ItemStack itemStack) {
        final Collection<String> blacklist = itemsFixModule.getBlacklist();
        final String materialName = itemStack.getType().toString();

        if (blacklist != null) {
            for (final String blockedMaterial : blacklist) {
                if (materialName.equals(blockedMaterial)) {
                    itemStack.setType(Material.AIR);
                    itemStack.setItemMeta(null);
                    return materialName;
                }
            }
        }

        return null;
    }

    public void cancelExploit(final Cancellable event, final HamsterPlayer hamsterPlayer, final Player player,
            final String reason, final double vls) {
        notificationsModule.debug(reason);
        event.setCancelled(true);

        if (vls > 0) {
            final BukkitExploitPlayer exploitPlayer = exploitPlayerManager.get(player);

            exploitPlayer.addVls(event, hamsterPlayer, packetsModule, vls);
        }
    }
}
