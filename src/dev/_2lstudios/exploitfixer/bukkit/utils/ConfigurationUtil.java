package dev._2lstudios.exploitfixer.bukkit.utils;

import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.plugin.Plugin;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.logging.Logger;

public class ConfigurationUtil {
	private static final String DATA_FOLDER_PLACEHOLDER = "%datafolder%";
	private final String dataFolderPath;
	private final String prefix;
	private final Plugin plugin;

	public ConfigurationUtil(final Plugin plugin) {
		this.plugin = plugin;
		this.dataFolderPath = plugin.getDataFolder().toString();
		this.prefix = "[" + plugin.getName() + "]";
	}

	public YamlConfiguration getConfiguration(String filePath) {
		final File file = new File(filePath.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath));

		if (file.exists()) {
			return YamlConfiguration.loadConfiguration(file);
		} else {
			return new YamlConfiguration();
		}
	}

	public void createConfiguration(String file) {
		final Logger logger = plugin.getLogger();

		try {
			file = file.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath);

			final File configFile = new File(file);

			if (!configFile.exists()) {
				final String[] files = file.split("/");
				final InputStream inputStream = plugin.getClass().getClassLoader()
						.getResourceAsStream(files[files.length - 1]);
				final File parentFile = configFile.getParentFile();

				if (parentFile != null) {
					parentFile.mkdirs();
				}

				if (inputStream != null) {
					Files.copy(inputStream, configFile.toPath());
				} else {
					configFile.createNewFile();
				}

				logger.info(prefix + " File '" + file + "' has been created!");
			}
		} catch (final IOException e) {
			logger.info(prefix + " Unable to create '" + file + "'!");
		}
	}

	public void saveConfiguration(final YamlConfiguration yamlConfiguration, final String file) {
		plugin.getServer().getScheduler().runTaskAsynchronously(plugin, () -> {
			try {
				yamlConfiguration.save(file.replace(DATA_FOLDER_PLACEHOLDER, dataFolderPath));

				plugin.getLogger().info(prefix + " File '" + file + "' has been saved!");
			} catch (final IOException e) {
				plugin.getLogger().info(prefix + " Unable to save '" + file + "'!");
			}
		});
	}

	public void deleteConfiguration(final String file) {
		plugin.getServer().getScheduler().runTaskAsynchronously(plugin, () -> {
			try {
				Files.delete(Path.of(file));

				plugin.getLogger().info(prefix + " File '" + file + "' has been removed!");
			} catch (IOException e) {
				plugin.getLogger().info(prefix + " Unable to remove '" + file + "'!");
			}
		});
	}
}