package dev._2lstudios.exploitfixer.bukkit.listeners;

import org.bukkit.Server;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.plugin.Plugin;

import dev._2lstudios.hamsterapi.adapters.HamsterPlayer;
import dev._2lstudios.exploitfixer.bukkit.instanceables.ExploitPlayer;
import dev._2lstudios.exploitfixer.bukkit.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.bukkit.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bukkit.modules.CommandsModule;
import dev._2lstudios.exploitfixer.bukkit.modules.MessagesModule;
import dev._2lstudios.exploitfixer.bukkit.modules.NotificationsModule;
import dev._2lstudios.exploitfixer.bukkit.utils.VersionUtil;

public class PlayerCommandListener implements Listener {
	private final Plugin plugin;
	private final CommandsModule commandsModule;
	private final ExploitPlayerManager exploitPlayerManager;
	private final NotificationsModule notificationsModule;
	private final MessagesModule messagesModule;

	public PlayerCommandListener(final Plugin plugin, final ModuleManager moduleManager) {
		this.plugin = plugin;
		this.commandsModule = moduleManager.getCommandsModule();
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
		this.notificationsModule = moduleManager.getNotificationsModule();
		this.messagesModule = moduleManager.getMessagesModule();
	}

	@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
	public void onPlayerCommand(final PlayerCommandPreprocessEvent event) {
		final Player player = event.getPlayer();
		final ExploitPlayer exploitPlayer = exploitPlayerManager.get(player);

		if (!exploitPlayer.isLogged()) {
			event.setCancelled(true);
		} else if (commandsModule.isEnabled()) {
			final Server server = plugin.getServer();
			final String message = event.getMessage().replaceAll("[\\w]+:", "").toLowerCase();
			final String playerName = player.getName();

			for (final String command : commandsModule.getCommands()) {
				if (message.startsWith(command + " ") || message.endsWith(command)) {
					for (final String punishment : commandsModule.getPunishments()) {
						if (command.equals("kick")) {
							final String locale;

							if (VersionUtil.isOneDotFifteen()) {
								locale = player.getLocale().substring(0, 2);
							} else {
								locale = player.spigot().getLocale().substring(0, 2);
							}

							final String kickMessage = messagesModule.getKickMessage(commandsModule, locale);
							final HamsterPlayer hamsterPlayer = new HamsterPlayer(player);

							hamsterPlayer.disconnect(kickMessage);
							hamsterPlayer.closeChannel();
							exploitPlayerManager.addPunishment();
						} else if (command.equals("notification")) {
							final String moduleName = commandsModule.getName();

							notificationsModule.sendNotification(moduleName, player, 1);
						} else {
							if (server.isPrimaryThread()) {
								server.dispatchCommand(server.getConsoleSender(),
										punishment.replace("%player%", playerName));
							} else {
								server.getScheduler().runTask(plugin, () -> {
									server.dispatchCommand(server.getConsoleSender(),
											punishment.replace("%player%", playerName));
								});
							}
						}
					}

					event.setCancelled(true);
					break;
				}
			}
		}
	}
}