package dev._2lstudios.exploitfixer.bukkit.modules;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import org.bukkit.Material;
import org.bukkit.configuration.Configuration;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.inventory.meta.SkullMeta;
import org.bukkit.plugin.Plugin;

import dev._2lstudios.exploitfixer.bukkit.modules.ItemsFixModule;
import dev._2lstudios.exploitfixer.shared.interfaces.Module;

public class ItemsFixModule implements Module {
	private final Plugin plugin;
	private boolean enabled;
	private int enchantLimit, maxStackSize;
	private Collection<String> blacklist;

	public ItemsFixModule(final Plugin plugin, final Configuration configYml) {
		this.plugin = plugin;
		reload(configYml);
	}

	final public void reload(final Configuration configYml) {
		final String name = getName().toLowerCase();

		this.enabled = configYml.getBoolean(name + ".enabled", true);
		this.enchantLimit = configYml.getInt(name + ".enchant_limit", 10);
		this.maxStackSize = configYml.getInt(name + ".max_stack_size", 64);
		this.blacklist = new HashSet<>(configYml.getStringList(name + ".blacklist"));
	}

	@Override
	final public boolean isEnabled() {
		return enabled;
	}

	@Override
	public String getName() {
		return "ItemsFix";
	}

	public int getEnchantLimit() {
		return enchantLimit;
	}

	public int getMaxStackSize() {
		return maxStackSize;
	}

	public Collection<String> getBlacklist() {
		return blacklist;
	}

	public ItemStack fixItem(final ItemStack itemStack) {
		final Material material = Material.getMaterial(itemStack.getType().name());
		final ItemMeta itemMeta = itemStack.getItemMeta(),
				newItemMeta = plugin.getServer().getItemFactory().getItemMeta(material);
		final int maxStackSize = getMaxStackSize();
		final short durability = itemStack.getDurability();

		if (itemStack.hasItemMeta()) {
			final Map<Enchantment, Integer> enchantments = itemStack.getEnchantments();
			final String displayName = itemMeta.getDisplayName();
			final List<String> lore = itemMeta.getLore();

			if (enchantLimit > -1) {
				for (final Enchantment enchantment : enchantments.keySet()) {
					final int level = enchantments.get(enchantment);

					if (level <= enchantLimit && level > -1) {
						newItemMeta.addEnchant(enchantment, level, true);
					}
				}
			}

			if (newItemMeta instanceof BookMeta) {
				final BookMeta bookMeta = (BookMeta) itemMeta;
				final BookMeta newBookMeta = (BookMeta) newItemMeta;

				newBookMeta.setTitle(bookMeta.getTitle());
				newBookMeta.setAuthor(bookMeta.getAuthor());
				newBookMeta.setPages(bookMeta.getPages());
			} else if (newItemMeta instanceof SkullMeta) {
				final SkullMeta skullMeta = (SkullMeta) itemMeta;
				final SkullMeta newSkullMeta = (SkullMeta) newItemMeta;

				newSkullMeta.setOwner(skullMeta.getOwner());
			}

			if (displayName != null && displayName.getBytes().length < 128) {
				newItemMeta.setDisplayName(displayName);
			}

			if (lore != null && lore.toString().getBytes().length < 1024) {
				newItemMeta.setLore(lore);
			}
		}

		if (maxStackSize > 0 && itemStack.getAmount() > maxStackSize) {
			itemStack.setAmount(maxStackSize);
		}

		itemStack.setType(material);
		itemStack.setItemMeta(newItemMeta);
		itemStack.setDurability(durability);

		return itemStack;
	}
}
