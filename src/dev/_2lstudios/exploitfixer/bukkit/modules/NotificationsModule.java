package dev._2lstudios.exploitfixer.bukkit.modules;

import java.lang.reflect.InvocationTargetException;
import java.util.Collection;
import java.util.HashSet;
import java.util.logging.Logger;

import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.Configuration;
import org.bukkit.entity.Player;

import dev._2lstudios.exploitfixer.shared.interfaces.IModule;

public class NotificationsModule implements IModule {
	private final CommandSender console;
	private final Logger logger;
	private final Collection<Player> notifications = new HashSet<>();
	private boolean enabled, debug;
	private String message;

	public NotificationsModule(final CommandSender console, final Logger logger, final Configuration configYml) {
		this.logger = logger;
		this.console = console;
		reload(configYml);
	}

	@Override
	public boolean isEnabled() {
		return this.enabled;
	}

	public void debug(final String message) {
		if (this.debug) {
			this.logger.info(message);
		}
	}

	public final void setNotifications(final Player player, final boolean input) {
		if (input) {
			notifications.add(player);
		} else {
			notifications.remove(player);
		}
	}

	public final boolean isNotifications(final Player player) {
		return notifications.contains(player);
	}

	public void sendNotification(final String check, final Player player, final int violations) {
		if (enabled && player != null) {
			final Player player1 = (Player) player;
			int ping = 0;

			try {
				final Object playerHandle = player.getClass().getMethod("getHandle").invoke(player);
				ping = (int) playerHandle.getClass().getField("ping").get(playerHandle);
			} catch (IllegalAccessException | NoSuchFieldException | InvocationTargetException
					| NoSuchMethodException ignored) {
			}

			final String notification = message.replace("%player%", player1.getName()).replace("%check%", check)
					.replace("%ping%", String.valueOf(ping)).replace("%vls%", String.valueOf(violations));

			console.sendMessage(notification);

			for (final Player player2 : getNotifications()) {
				player2.sendMessage(notification);
			}
		}
	}

	public final Collection<Player> getNotifications() {
		return notifications;
	}

	public void reload(final Configuration configYml) {
		this.enabled = configYml.getBoolean("notifications.enabled");
		this.debug = configYml.getBoolean("notifications.debug");
		this.message = ChatColor.translateAlternateColorCodes('&', configYml.getString("notifications.message"));
	}

	@Override
	public String getName() {
		return "Notifications";
	}
}
