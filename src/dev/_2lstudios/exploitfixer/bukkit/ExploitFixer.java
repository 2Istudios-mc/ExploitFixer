package dev._2lstudios.exploitfixer.bukkit;

import java.util.logging.Logger;

import org.bukkit.Server;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitScheduler;

import dev._2lstudios.exploitfixer.bukkit.commands.ExploitFixerCommand;
import dev._2lstudios.exploitfixer.bukkit.configuration.BukkitConfiguration;
import dev._2lstudios.exploitfixer.bukkit.listener.ListenerInitializer;
import dev._2lstudios.exploitfixer.bukkit.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.bukkit.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bukkit.utils.ConfigurationUtil;
import dev._2lstudios.exploitfixer.bukkit.utils.VersionUtil;
import dev._2lstudios.exploitfixer.shared.configuration.IConfiguration;

public class ExploitFixer extends JavaPlugin {
	private static ExploitFixer exploitFixer;
	private ConfigurationUtil configurationUtil;
	private ModuleManager moduleManager;
	private ListenerInitializer listenerInitializer;

	@Override
	public void onEnable() {
		final Server server = this.getServer();
		final BukkitScheduler scheduler = server.getScheduler();

		if (!checkHamsterAPI()) {
			throw new NullPointerException(
					"ExploitFixer requires HamsterAPI to listen to packets and block exploits! Download: https://www.spigotmc.org/resources/78831/");
		}

		configurationUtil = new ConfigurationUtil(this);

		createConfigurations();

		final IConfiguration configYml = new BukkitConfiguration(
				configurationUtil.getConfiguration("%datafolder%/config.yml"));
		final IConfiguration messagesYml = new BukkitConfiguration(
				configurationUtil.getConfiguration("%datafolder%/messages.yml"));

		VersionUtil.initialize(server);

		exploitFixer = this;
		moduleManager = new ModuleManager(this);
		moduleManager.reload(configYml, messagesYml);
		listenerInitializer = new ListenerInitializer(this, moduleManager);

		register();

		scheduler.runTaskTimerAsynchronously(this, () -> {
			final ExploitPlayerManager exploitPlayerManager = moduleManager.getExploitPlayerManager();

			exploitPlayerManager.clear();
		}, 6000L, 6000L);
	}

	@Override
	public void onDisable() {
		final Server server = this.getServer();
		final BukkitScheduler scheduler = server.getScheduler();

		scheduler.cancelTasks(this);

		this.listenerInitializer.unregister();
	}

	public void reload() {
		final Server server = getServer();
		final BukkitScheduler scheduler = server.getScheduler();

		scheduler.cancelTasks(this);
		server.getMessenger().unregisterIncomingPluginChannel(this);

		createConfigurations();

		final IConfiguration configYml = new BukkitConfiguration(
				this.configurationUtil.getConfiguration("%datafolder%/config.yml"));
		final IConfiguration messagesYml = new BukkitConfiguration(
				this.configurationUtil.getConfiguration("%datafolder%/messages.yml"));

		moduleManager.reload(configYml, messagesYml);

		register();
	}

	private boolean checkHamsterAPI() {
		final Server server = this.getServer();
		final PluginManager pluginManager = server.getPluginManager();

		return pluginManager.isPluginEnabled("HamsterAPI");
	}

	private void createConfigurations() {
		configurationUtil.createConfiguration("%datafolder%/config.yml");
		configurationUtil.createConfiguration("%datafolder%/messages.yml");
	}

	private void register() {
		final Logger logger = this.getLogger();

		getCommand("exploitfixer").setExecutor(new ExploitFixerCommand(this, moduleManager));

		logger.info("Successfully registered commands!");

		if (this.listenerInitializer.isRegistered()) {
			this.listenerInitializer.unregister();
		}

		this.listenerInitializer.register();

		logger.info("Successfully registered listeners!");
		logger.info("Successfully hooked with HamsterAPI!");
	}

	public static ExploitFixer getInstance() {
		return exploitFixer;
	}
}