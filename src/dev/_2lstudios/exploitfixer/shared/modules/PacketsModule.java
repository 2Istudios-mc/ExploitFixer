package dev._2lstudios.exploitfixer.shared.modules;

import java.util.HashMap;
import java.util.Map;

import dev._2lstudios.exploitfixer.shared.configuration.IConfiguration;
import dev._2lstudios.exploitfixer.shared.exploit.Violations;
import dev._2lstudios.exploitfixer.shared.interfaces.IViolationModule;

public class PacketsModule implements IViolationModule {
	private final Map<String, Double> multipliers = new HashMap<>();
	private Violations violations;
	private double dataVls, bookVls, tagVls, blockDigVls, blockPlaceVls, setCreativeSlot, windowClick, cancelVls,
			reduceVls;
	private int dataBytesBook, dataBytesSign, dataBytes, dataBytesDivider;
	private boolean enabled, offline;

	public void reload(final IConfiguration configYml) {
		final IConfiguration configurationSection = configYml.getSection("custompayload.multipliers");
		final String name = getName().toLowerCase();

		this.enabled = configYml.getBoolean(name + ".enabled", false);
		this.cancelVls = configYml.getDouble(name + ".cancel_vls", 0);
		this.reduceVls = configYml.getDouble(name + ".reduce_vls", 0);
		this.offline = configYml.getBoolean(name + ".offline", false);
		this.dataVls = configYml.getDouble(name + ".data.vls", 0);
		this.bookVls = configYml.getDouble(name + ".book", 0);
		this.tagVls = configYml.getDouble(name + ".tag", 0);
		this.dataBytes = configYml.getInt(name + ".data.bytes", 0);
		this.dataBytesBook = configYml.getInt(name + ".data.bytes_book", 0);
		this.dataBytesSign = configYml.getInt(name + ".data.bytes_sign", 0);
		this.dataBytesDivider = configYml.getInt(name + ".data.bytes_divider", 0);
		this.windowClick = configYml.getDouble(name + ".window_click", 0);
		this.blockPlaceVls = configYml.getDouble(name + ".block_place", 0);
		this.blockDigVls = configYml.getDouble(name + ".block_dig", 0);
		this.setCreativeSlot = configYml.getDouble(name + ".set_creative_slot", 0);
		this.violations = new Violations(configYml.getSection(name + ".violations"));

		for (final String key : configurationSection.getKeys()) {
			multipliers.put(key, configurationSection.getDouble(key, 0));
		}
	}

	@Override
	public boolean isEnabled() {
		return enabled;
	}

	@Override
	public String getName() {
		return "Packets";
	}

	@Override
	public double getCancelVls() {
		return cancelVls;
	}

	@Override
	public double getReduceVls() {
		return reduceVls;
	}

	@Override
	public Violations getViolations() {
		return violations;
	}

	public double getMultiplier(final String packetName) {
		return multipliers.getOrDefault(packetName, multipliers.getOrDefault("PacketPlayInOther", 1D));
	}

	public double getWindowClick() {
		return windowClick;
	}

	public double getSetCreativeSlot() {
		return setCreativeSlot;
	}

	public double getBlockDigVls() {
		return blockDigVls;
	}

	public double getBlockPlaceVls() {
		return blockPlaceVls;
	}

	public double getDataVls() {
		return dataVls;
	}

	public double getBookVls() {
		return bookVls;
	}

	public double getTagVls() {
		return tagVls;
	}

	public int getDataBytes() {
		return dataBytes;
	}

	public int getDataBytesBook() {
		return dataBytesBook;
	}

	public int getDataBytesSign() {
		return dataBytesSign;
	}

	public boolean isOffline() {
		return offline;
	}

	public int getDataBytesDivider() {
		return dataBytesDivider;
	}
}
