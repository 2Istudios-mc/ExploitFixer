package dev._2lstudios.exploitfixer.bungee;

import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

import dev._2lstudios.exploitfixer.bungee.commands.ExploitFixerCommand;
import dev._2lstudios.exploitfixer.bungee.listeners.ListenerInitializer;
import dev._2lstudios.exploitfixer.bungee.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.bungee.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bungee.utils.ConfigurationUtil;
import net.md_5.bungee.api.plugin.Plugin;
import net.md_5.bungee.api.plugin.PluginManager;
import net.md_5.bungee.api.scheduler.TaskScheduler;
import net.md_5.bungee.config.Configuration;

public class ExploitFixer extends Plugin {
	private static ExploitFixer exploitFixer;
	private ConfigurationUtil configurationUtil;
	private ModuleManager moduleManager;
	private ListenerInitializer listenerInitializer;

	@Override
	public void onEnable() {
		final TaskScheduler scheduler = getProxy().getScheduler();

		this.configurationUtil = new ConfigurationUtil(this);

		createConfigurations();

		final Configuration configYml = configurationUtil.getConfiguration("%datafolder%/config.yml");
		final Configuration messagesYml = configurationUtil.getConfiguration("%datafolder%/messages.yml");

		exploitFixer = this;
		this.moduleManager = new ModuleManager(this, configYml, messagesYml);
		this.listenerInitializer = new ListenerInitializer(this, moduleManager);

		registerListeners();
		registerCommands();

		scheduler.schedule(this, () -> {
			final ExploitPlayerManager exploitPlayerManager = moduleManager.getExploitPlayerManager();

			exploitPlayerManager.clear();
		}, 5, 5, TimeUnit.MINUTES);
	}

	@Override
	public void onDisable() {
		final TaskScheduler scheduler = getProxy().getScheduler();

		scheduler.cancel(this);
	}

	public void reload() {
		final ConfigurationUtil configurationUtil = new ConfigurationUtil(this);

		createConfigurations();

		final Configuration configYml = configurationUtil.getConfiguration("%datafolder%/config.yml");
		final Configuration messagesYml = configurationUtil.getConfiguration("%datafolder%/messages.yml");

		moduleManager.reload(configYml, messagesYml, null);

		registerCommands();
		registerListeners();
	}

	private void createConfigurations() {
		this.configurationUtil.createConfiguration("%datafolder%/config.yml");
		this.configurationUtil.createConfiguration("%datafolder%/messages.yml");
	}

	private void registerListeners() {
		final Logger logger = this.getLogger();

		if (this.listenerInitializer.isRegistered()) {
			this.listenerInitializer.unregister();
		}

		this.listenerInitializer.register();

		logger.info("Successfully registered listeners!");
	}

	private void registerCommands() {
		final PluginManager pluginManager = getProxy().getPluginManager();

		pluginManager.unregisterCommands(this);
		pluginManager.registerCommand(this,
				new ExploitFixerCommand("exploitfixer", new String[] { "ef" }, moduleManager));
	}

	public static ExploitFixer getInstance() {
		return exploitFixer;
	}
}