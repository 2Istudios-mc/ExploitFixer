package dev._2lstudios.exploitfixer.bungee.instanceables;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import dev._2lstudios.exploitfixer.bungee.managers.ExploitPlayerManager;
import dev._2lstudios.exploitfixer.bungee.managers.ModuleManager;
import dev._2lstudios.exploitfixer.bungee.modules.MessagesModule;
import dev._2lstudios.exploitfixer.bungee.modules.NotificationsModule;
import dev._2lstudios.exploitfixer.bungee.utils.VersionUtil;
import dev._2lstudios.exploitfixer.shared.interfaces.Module;
import dev._2lstudios.exploitfixer.shared.interfaces.ViolationModule;
import net.md_5.bungee.api.CommandSender;
import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.chat.TextComponent;
import net.md_5.bungee.api.connection.ProxiedPlayer;
import net.md_5.bungee.api.plugin.Cancellable;
import net.md_5.bungee.api.plugin.Plugin;

public class ExploitPlayer {
	private final ProxyServer server;
	private final ExploitPlayerManager exploitPlayerManager;
	private final MessagesModule messagesModule;
	private final NotificationsModule notificationsModule;
	private final Map<ViolationModule, Double> violations;
	private final Collection<Collection<String>> punishments;
	private final String name;
	private String onlineUUID = null;
	private boolean logged = false;
	private int channels = 0;
	private double lastViolation = 0;

	public ExploitPlayer(final ProxyServer server, final String name, final ModuleManager moduleManager) {
		this.server = server;
		this.exploitPlayerManager = moduleManager.getExploitPlayerManager();
		this.messagesModule = moduleManager.getMessagesModule();
		this.notificationsModule = moduleManager.getNotificationsModule();
		this.violations = new HashMap<>();
		this.punishments = new HashSet<>();
		this.name = name;
	}

	public void clearChannels() {
		this.channels = 0;
	}

	public int addChannels(final int channels) {
		return this.channels += channels;
	}

	public double getViolations(final Module module) {
		if (module instanceof ViolationModule) {
			return violations.getOrDefault(module, 0D);
		} else {
			return 0D;
		}
	}

	public String getOnlineUUID() {
		if (onlineUUID == null) {
			try {
				final URLConnection connection = new URL("https://api.mojang.com/users/profiles/minecraft/" + name)
						.openConnection();

				connection.setDoOutput(true);
				connection.connect();

				final BufferedReader bufferedReader = new BufferedReader(
						new InputStreamReader(connection.getInputStream()));
				final StringBuilder response = new StringBuilder();

				String inputLine;

				while ((inputLine = bufferedReader.readLine()) != null)
					response.append(inputLine).append("\n");

				bufferedReader.close();
				onlineUUID = response.toString();
			} catch (Exception ignored) {
			}
		}

		return onlineUUID;
	}

	public void addVls(final Plugin plugin, final Object event, final ProxiedPlayer player,
			final ViolationModule module, final double amount) {
		if (player.isConnected()) {
			final Violations violations = (Violations) module.getViolations();

			if (violations != null) {
				final double currentTime = System.currentTimeMillis();

				if (currentTime - lastViolation >= 1000) {
					lastViolation = currentTime;

					for (final ViolationModule violationModule : new HashSet<>(this.violations.keySet())) {
						final double vls = this.violations.get(violationModule) - violationModule.getReduceVls();

						if (vls <= 0) {
							this.violations.remove(violationModule);
						} else {
							this.violations.put(violationModule, vls);
						}
					}
				}

				final double newVls = getViolations(module) + amount;

				this.violations.put(module, newVls);

				if (event instanceof Cancellable && module.getCancelVls() <= newVls) {
					((Cancellable) event).setCancelled(true);
				}

				for (final int threshold : violations.getViolations()) {
					if (threshold <= newVls) {
						final Collection<String> commands = violations.getCommands(threshold);

						punish(module, player, commands, (int) newVls);
					}
				}
			}
		} else if (event instanceof Cancellable) {
			((Cancellable) event).setCancelled(true);
		}
	}

	public void punish(final Module module, final ProxiedPlayer player, final Collection<String> punishments,
			final int newVls) {
		if (!punishments.isEmpty() && !this.punishments.contains(punishments)) {
			final CommandSender consoleSender = server.getConsole();
			final String playerName = player.getName();

			for (final String punishment : punishments) {
				if (punishment.equals("kick")) {
					final String locale = VersionUtil.getLocale(player);
					final String kickMessage = messagesModule.getKickMessage(module, locale);

					player.disconnect(TextComponent.fromLegacyText(kickMessage));
				} else if (punishment.equals("notification")) {
					final String moduleName = module.getName();

					notificationsModule.sendNotification(moduleName, player, (int) newVls);
				} else {
					server.getPluginManager().dispatchCommand(consoleSender,
							punishment.replace("%player%", playerName));
				}
			}

			this.punishments.add(punishments);
			this.exploitPlayerManager.addPunishment();
		}
	}

	public void clearViolations() {
		violations.clear();
	}

	public void setLogged(final boolean logged) {
		this.logged = logged;
	}

	public boolean isLogged() {
		return logged;
	}
}
