package dev._2lstudios.exploitfixer.bungee.managers;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.UUID;
import java.util.logging.Level;

import dev._2lstudios.exploitfixer.bungee.instanceables.ExploitPlayer;
import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.connection.ProxiedPlayer;

public class ExploitPlayerManager {
	private final ProxyServer server;
	private final ModuleManager moduleManager;
	private final Map<UUID, ExploitPlayer> exploitPlayers = new HashMap<>();
	private int punishments = 0;

	ExploitPlayerManager(final ProxyServer server, final ModuleManager moduleManager) {
		this.server = server;
		this.moduleManager = moduleManager;

		reload();
	}

	public int getSize() {
		return exploitPlayers.size();
	}

	public int getPunishments() {
		return punishments;
	}

	public ExploitPlayer get(final UUID uuid, final ProxiedPlayer player) {
		ExploitPlayer exploitPlayer = exploitPlayers.getOrDefault(uuid, null);

		if (exploitPlayer == null) {
			exploitPlayer = new ExploitPlayer(server, player.getName(), moduleManager);
			exploitPlayers.put(uuid, exploitPlayer);
		}

		return exploitPlayer;
	}

	public int addPunishment() {
		return ++punishments;
	}

	public void reload() {
		exploitPlayers.clear();

		for (final ProxiedPlayer player : server.getPlayers()) {
			final ExploitPlayer exploitPlayer = get(player.getUniqueId(), player);

			exploitPlayer.setLogged(true);
		}
	}

	public void clear() {
		final Iterator<UUID> iterator = exploitPlayers.keySet().iterator();
		boolean cleared = false;

		while (iterator.hasNext()) {
			final UUID uuid = iterator.next();

			if (server.getPlayer(uuid) == null) {
				iterator.remove();
				cleared = true;
			}
		}

		if (cleared) {
			server.getLogger().log(Level.INFO, "[ExploitFixer] Cleared unused cached players!");
		}
	}
}
